//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export module Ipool {

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * Get bearer token for authentication in the API
     * @return OK
     */
    token(grant_type: string, username: string, password: string): Promise<Anonymous> {
        let url_ = this.baseUrl + "/api/token";
        url_ = url_.replace(/[?&]$/, "");

        let content_ = "";
        if (grant_type === undefined || grant_type === null)
            throw new Error("The parameter 'grant_type' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("grant_type") + "=" + encodeURIComponent("" + grant_type) + "&";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("username") + "=" + encodeURIComponent("" + username) + "&";
        if (password === undefined || password === null)
            throw new Error("The parameter 'password' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("password") + "=" + encodeURIComponent("" + password) + "&";
        content_ = content_.replace(/&$/, "");

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processToken(_response);
        });
    }

    protected processToken(response: Response): Promise<Anonymous> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous>(null as any);
    }
}

export class AppRatingsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    getAppRatingOption(authorization: string): Promise<AppRatingOption> {
        let url_ = this.baseUrl + "/api/apprating";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAppRatingOption(_response);
        });
    }

    protected processGetAppRatingOption(response: Response): Promise<AppRatingOption> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppRatingOption.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppRatingOption>(null as any);
    }

    /**
     * @param authorization access token
     * @return No Content
     */
    updateUserRating(body: AppRateButton, authorization: string): Promise<void> {
        let url_ = this.baseUrl + "/api/apprating/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUserRating(_response);
        });
    }

    protected processUpdateUserRating(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class AttitudeSurveysClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    getAttitudeSurveyPeriodPollQuestion(authorization: string): Promise<AttitudeSurveyPeriodPollQuestion> {
        let url_ = this.baseUrl + "/api/attitudesurveys/question";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAttitudeSurveyPeriodPollQuestion(_response);
        });
    }

    protected processGetAttitudeSurveyPeriodPollQuestion(response: Response): Promise<AttitudeSurveyPeriodPollQuestion> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AttitudeSurveyPeriodPollQuestion.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AttitudeSurveyPeriodPollQuestion>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    postAttitudeSurveyPeriodPollQuestionResponse(attitudeSurveyPeriodPollQuestionResponsePostRequest: AttitudeSurveyPeriodPollQuestionResponsePostRequest, authorization: string): Promise<any> {
        let url_ = this.baseUrl + "/api/attitudesurveys/question";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(attitudeSurveyPeriodPollQuestionResponsePostRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostAttitudeSurveyPeriodPollQuestionResponse(_response);
        });
    }

    protected processPostAttitudeSurveyPeriodPollQuestionResponse(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }
}

export class CategoriesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    loadAllUnitCategories(authorization: string): Promise<Category[]> {
        let url_ = this.baseUrl + "/api/categories/all/units";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoadAllUnitCategories(_response);
        });
    }

    protected processLoadAllUnitCategories(response: Response): Promise<Category[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Category.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    loadAllSubUnitCategories(authorization: string): Promise<Category[]> {
        let url_ = this.baseUrl + "/api/categories/all/subunits";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoadAllSubUnitCategories(_response);
        });
    }

    protected processLoadAllSubUnitCategories(response: Response): Promise<Category[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Category.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    loadUserCategories(authorization: string): Promise<Category[]> {
        let url_ = this.baseUrl + "/api/categories/users";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoadUserCategories(_response);
        });
    }

    protected processLoadUserCategories(response: Response): Promise<Category[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Category.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    loadUserSubUnitCategories(authorization: string): Promise<Category[]> {
        let url_ = this.baseUrl + "/api/categories/users/subunits";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoadUserSubUnitCategories(_response);
        });
    }

    protected processLoadUserSubUnitCategories(response: Response): Promise<Category[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Category.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    loadLeaveCategories(type: number, userSelectable: boolean, source: string, authorization: string): Promise<LeaveCategories[]> {
        let url_ = this.baseUrl + "/api/categories/leaves?";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (userSelectable === undefined || userSelectable === null)
            throw new Error("The parameter 'userSelectable' must be defined and cannot be null.");
        else
            url_ += "userSelectable=" + encodeURIComponent("" + userSelectable) + "&";
        if (source === undefined || source === null)
            throw new Error("The parameter 'source' must be defined and cannot be null.");
        else
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoadLeaveCategories(_response);
        });
    }

    protected processLoadLeaveCategories(response: Response): Promise<LeaveCategories[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LeaveCategories.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LeaveCategories[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    loadLeaveCategories2(authorization: string): Promise<AllLeaveCategories[]> {
        let url_ = this.baseUrl + "/api/categories/leaves/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoadLeaveCategories2(_response);
        });
    }

    protected processLoadLeaveCategories2(response: Response): Promise<AllLeaveCategories[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AllLeaveCategories.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AllLeaveCategories[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    loadCategoryGroups(authorization: string): Promise<CategoryGroup[]> {
        let url_ = this.baseUrl + "/api/categories/groups";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoadCategoryGroups(_response);
        });
    }

    protected processLoadCategoryGroups(response: Response): Promise<CategoryGroup[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CategoryGroup.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CategoryGroup[]>(null as any);
    }
}

export class ConversationsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param page (optional) 
     * @param pageSize (optional) 
     * @param search (optional) 
     * @param employeeContract (optional) 
     * @param conversations (optional) 
     * @param confirmation (optional) 
     * @param yesno (optional) 
     * @param automatic (optional) 
     * @param flagged (optional) 
     * @param authorization access token
     * @return OK
     */
    getV2(page: number | null | undefined, pageSize: number | null | undefined, search: string | null | undefined, employeeContract: boolean | null | undefined, conversations: boolean | null | undefined, confirmation: boolean | null | undefined, yesno: boolean | null | undefined, automatic: boolean | null | undefined, flagged: boolean | null | undefined, authorization: string): Promise<Conversation[]> {
        let url_ = this.baseUrl + "/api/conversations/v2?";
        if (page !== undefined && page !== null)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        if (employeeContract !== undefined && employeeContract !== null)
            url_ += "employeeContract=" + encodeURIComponent("" + employeeContract) + "&";
        if (conversations !== undefined && conversations !== null)
            url_ += "conversations=" + encodeURIComponent("" + conversations) + "&";
        if (confirmation !== undefined && confirmation !== null)
            url_ += "confirmation=" + encodeURIComponent("" + confirmation) + "&";
        if (yesno !== undefined && yesno !== null)
            url_ += "yesno=" + encodeURIComponent("" + yesno) + "&";
        if (automatic !== undefined && automatic !== null)
            url_ += "automatic=" + encodeURIComponent("" + automatic) + "&";
        if (flagged !== undefined && flagged !== null)
            url_ += "flagged=" + encodeURIComponent("" + flagged) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetV2(_response);
        });
    }

    protected processGetV2(response: Response): Promise<Conversation[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Conversation.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Conversation[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    getAll(authorization: string): Promise<Conversation[]> {
        let url_ = this.baseUrl + "/api/conversations";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<Conversation[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Conversation.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Conversation[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    get(id: number, authorization: string): Promise<any> {
        let url_ = this.baseUrl + "/api/conversations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }
}

export class CustomerClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    get(authorization: string): Promise<Customer> {
        let url_ = this.baseUrl + "/api/customer";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<Customer> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Customer.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Customer>(null as any);
    }
}

export class ExternalCalendarClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    get(authorization: string): Promise<string> {
        let url_ = this.baseUrl + "/api/externalcalendar";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    show(externalCalendarPostRequest: ExternalCalendarPostRequest, authorization: string): Promise<string> {
        let url_ = this.baseUrl + "/api/externalcalendar";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(externalCalendarPostRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processShow(_response);
        });
    }

    protected processShow(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }
}

export class HelloWorldClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    get(authorization: string): Promise<string> {
        let url_ = this.baseUrl + "/api/helloworld";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }
}

export class LanguagesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    get(authorization: string): Promise<Language[]> {
        let url_ = this.baseUrl + "/api/languages";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<Language[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Language.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Language[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    getV2(authorization: string): Promise<Language[]> {
        let url_ = this.baseUrl + "/api/languages/v2";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetV2(_response);
        });
    }

    protected processGetV2(response: Response): Promise<Language[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Language.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Language[]>(null as any);
    }
}

export class LoanApplicationsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    get(authorization: string): Promise<any> {
        let url_ = this.baseUrl + "/api/loanapplications";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    put(catId: number, authorization: string): Promise<any> {
        let url_ = this.baseUrl + "/api/loanapplications?";
        if (catId === undefined || catId === null)
            throw new Error("The parameter 'catId' must be defined and cannot be null.");
        else
            url_ += "catId=" + encodeURIComponent("" + catId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut(_response);
        });
    }

    protected processPut(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    post(catId: number, authorization: string): Promise<any> {
        let url_ = this.baseUrl + "/api/loanapplications";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(catId);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }
}

export class LoginClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    getClass(authorization: string): Promise<any> {
        let url_ = this.baseUrl + "/api/login/class";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetClass(_response);
        });
    }

    protected processGetClass(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    validateLogin(authorization: string): Promise<LoginResult> {
        let url_ = this.baseUrl + "/api/login/validate";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValidateLogin(_response);
        });
    }

    protected processValidateLogin(response: Response): Promise<LoginResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LoginResult>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    saveActivity(activityType: number, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/login/activity/{activitytype}";
        if (activityType === undefined || activityType === null)
            throw new Error("The parameter 'activityType' must be defined.");
        url_ = url_.replace("{activityType}", encodeURIComponent("" + activityType));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveActivity(_response);
        });
    }

    protected processSaveActivity(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    get(authorization: string): Promise<LoginResult> {
        let url_ = this.baseUrl + "/api/login";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<LoginResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LoginResult>(null as any);
    }
}

export class LoginOptionsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @return OK
     */
    getLoginOption(): Promise<string> {
        let url_ = this.baseUrl + "/api/loginoptions";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLoginOption(_response);
        });
    }

    protected processGetLoginOption(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }
}

export class MessageClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    post(message: MessageInfo, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/message/send";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(message);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    setMessageDate(messageStatus: MessageStatus, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/message/set/date";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(messageStatus);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetMessageDate(_response);
        });
    }

    protected processSetMessageDate(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    setMessageRemoved(messageStatus: MessageStatus, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/message/set/removed";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(messageStatus);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetMessageRemoved(_response);
        });
    }

    protected processSetMessageRemoved(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    setMessageAnswerYesNo(messageStatus: MessageStatus, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/message/set/answer-yes-no";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(messageStatus);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetMessageAnswerYesNo(_response);
        });
    }

    protected processSetMessageAnswerYesNo(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    setMessageUnread(messageStatus: MessageStatus, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/message/set/unread";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(messageStatus);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetMessageUnread(_response);
        });
    }

    protected processSetMessageUnread(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    setAttachFiles(convId: number, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/message/set/attachfiles/{convid}";
        if (convId === undefined || convId === null)
            throw new Error("The parameter 'convId' must be defined.");
        url_ = url_.replace("{convId}", encodeURIComponent("" + convId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetAttachFiles(_response);
        });
    }

    protected processSetAttachFiles(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    setMessageApproveNotes(messageStatus: MessageStatus, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/message/set/employee-contract";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(messageStatus);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetMessageApproveNotes(_response);
        });
    }

    protected processSetMessageApproveNotes(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    toggleMessageFlag(convID: number, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/message/toggleflag?";
        if (convID === undefined || convID === null)
            throw new Error("The parameter 'convID' must be defined and cannot be null.");
        else
            url_ += "convID=" + encodeURIComponent("" + convID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processToggleMessageFlag(_response);
        });
    }

    protected processToggleMessageFlag(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }
}

export class OfficeClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    getAllOfficeFiles(authorization: string): Promise<OfficeFiles[]> {
        let url_ = this.baseUrl + "/api/myoffice/getallfiles";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllOfficeFiles(_response);
        });
    }

    protected processGetAllOfficeFiles(response: Response): Promise<OfficeFiles[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OfficeFiles.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OfficeFiles[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    getMyOfficeNofications(authorization: string): Promise<OfficeNotification[]> {
        let url_ = this.baseUrl + "/api/myoffice/allnotifications";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMyOfficeNofications(_response);
        });
    }

    protected processGetMyOfficeNofications(response: Response): Promise<OfficeNotification[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OfficeNotification.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OfficeNotification[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    clearMyOfficeNotification(officeNotifications: MyOfficeNotifications, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/myoffice/clearnotification";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(officeNotifications);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClearMyOfficeNotification(_response);
        });
    }

    protected processClearMyOfficeNotification(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }
}

export class ParametersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    getCustomWarning(authorization: string): Promise<string> {
        let url_ = this.baseUrl + "/api/parameters/customwarning";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCustomWarning(_response);
        });
    }

    protected processGetCustomWarning(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    get(authorization: string): Promise<Parameter[]> {
        let url_ = this.baseUrl + "/api/parameters";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<Parameter[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Parameter.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Parameter[]>(null as any);
    }
}

export class QAClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    postQaPerformance(qaPerformanceList: QAPerformance[], authorization: string): Promise<any> {
        let url_ = this.baseUrl + "/api/qa/performance";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(qaPerformanceList);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostQaPerformance(_response);
        });
    }

    protected processPostQaPerformance(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }
}

export class ServiceClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    newSwapOffer(model: SwapPostModel, authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/new/swapoffer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processNewSwapOffer(_response);
        });
    }

    protected processNewSwapOffer(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    cancelSwapOffer(id: number, authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/cancel/swapoffer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCancelSwapOffer(_response);
        });
    }

    protected processCancelSwapOffer(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    cancelSwapOffer2(model: ServicePostModel, authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/cancel/multipleswapoffers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCancelSwapOffer2(_response);
        });
    }

    protected processCancelSwapOffer2(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param offerId (optional) 
     * @param authorization access token
     * @return OK
     */
    acceptSwapOffer(id: number, offerId: number | null | undefined, authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/accept/swapoffer/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (offerId !== undefined && offerId !== null)
            url_ += "offerId=" + encodeURIComponent("" + offerId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAcceptSwapOffer(_response);
        });
    }

    protected processAcceptSwapOffer(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    acceptSwapOffer2(id: number, offerId: number, authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/accept/swapoffer/{id}/{offerid}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (offerId === undefined || offerId === null)
            throw new Error("The parameter 'offerId' must be defined.");
        url_ = url_.replace("{offerId}", encodeURIComponent("" + offerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAcceptSwapOffer2(_response);
        });
    }

    protected processAcceptSwapOffer2(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param offerId (optional) 
     * @param authorization access token
     * @return OK
     */
    declineSwapOffer(id: number, offerId: number | null | undefined, authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/decline/swapoffer/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (offerId !== undefined && offerId !== null)
            url_ += "offerId=" + encodeURIComponent("" + offerId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeclineSwapOffer(_response);
        });
    }

    protected processDeclineSwapOffer(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    declineSwapOffer2(id: number, offerId: number, authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/decline/swapoffer/{id}/{offerid}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (offerId === undefined || offerId === null)
            throw new Error("The parameter 'offerId' must be defined.");
        url_ = url_.replace("{offerId}", encodeURIComponent("" + offerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeclineSwapOffer2(_response);
        });
    }

    protected processDeclineSwapOffer2(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    newSwapTime(model: ServicePostModel, authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/new/swap";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processNewSwapTime(_response);
        });
    }

    protected processNewSwapTime(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    cancelSwapTime(model: ServicePostModel, authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/cancel/swap";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCancelSwapTime(_response);
        });
    }

    protected processCancelSwapTime(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    reserveBooking(idTime: number, authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/reserve/booking/{idtime}";
        if (idTime === undefined || idTime === null)
            throw new Error("The parameter 'idTime' must be defined.");
        url_ = url_.replace("{idTime}", encodeURIComponent("" + idTime));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReserveBooking(_response);
        });
    }

    protected processReserveBooking(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    availabilityChanges(changes: PostAvailable[], authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/change/availability";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(changes);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAvailabilityChanges(_response);
        });
    }

    protected processAvailabilityChanges(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    availabilityChanges2(postModel: PostAvailableV2, authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/v2/change/availability";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(postModel);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAvailabilityChanges2(_response);
        });
    }

    protected processAvailabilityChanges2(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    notAvailableChanges(postModel: PostAvailableV2, authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/v2/change/notavailable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(postModel);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processNotAvailableChanges(_response);
        });
    }

    protected processNotAvailableChanges(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    applyLeaveOfAbsence(changes: PostVacation[], authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/apply/lob";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(changes);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApplyLeaveOfAbsence(_response);
        });
    }

    protected processApplyLeaveOfAbsence(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    registerDevice(device: Device, authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/device";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(device);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegisterDevice(_response);
        });
    }

    protected processRegisterDevice(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    rejectAvailableTime(id: number, authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/reject/availabletime/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRejectAvailableTime(_response);
        });
    }

    protected processRejectAvailableTime(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    removeAvailableShift(id: number, authorization: string): Promise<ServiceResult> {
        let url_ = this.baseUrl + "/api/service/remove/availabletime/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemoveAvailableShift(_response);
        });
    }

    protected processRemoveAvailableShift(response: Response): Promise<ServiceResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResult>(null as any);
    }
}

export class ShiftsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    loadMySwaps(authorization: string): Promise<Swap[]> {
        let url_ = this.baseUrl + "/api/shifts/myswaps";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoadMySwaps(_response);
        });
    }

    protected processLoadMySwaps(response: Response): Promise<Swap[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Swap.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Swap[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    loadEmployeeSwaps(authorization: string): Promise<EmployeeSwap[]> {
        let url_ = this.baseUrl + "/api/shifts/employeeswaps";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoadEmployeeSwaps(_response);
        });
    }

    protected processLoadEmployeeSwaps(response: Response): Promise<EmployeeSwap[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EmployeeSwap.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EmployeeSwap[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    countSimpleSwaps(authorization: string): Promise<number> {
        let url_ = this.baseUrl + "/api/shifts/simpleswaps";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCountSimpleSwaps(_response);
        });
    }

    protected processCountSimpleSwaps(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    canAcceptShift(id: number, authorization: string): Promise<number> {
        let url_ = this.baseUrl + "/api/shifts/available/canaccept/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCanAcceptShift(_response);
        });
    }

    protected processCanAcceptShift(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    loadAvailableShifts(authorization: string): Promise<Shift[]> {
        let url_ = this.baseUrl + "/api/shifts/available";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoadAvailableShifts(_response);
        });
    }

    protected processLoadAvailableShifts(response: Response): Promise<Shift[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Shift.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Shift[]>(null as any);
    }

    /**
     * @param loadAllEmployees (optional) 
     * @param startRecord (optional) 
     * @param maxRecords (optional) 
     * @param authorization access token
     * @return OK
     */
    loadStaffShifts(startDate: Date, endDate: Date, loadAllEmployees: boolean | null | undefined, startRecord: number | null | undefined, maxRecords: number | null | undefined, authorization: string): Promise<Shift[]> {
        let url_ = this.baseUrl + "/api/shifts/staff?";
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined and cannot be null.");
        else
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined and cannot be null.");
        else
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (loadAllEmployees !== undefined && loadAllEmployees !== null)
            url_ += "loadAllEmployees=" + encodeURIComponent("" + loadAllEmployees) + "&";
        if (startRecord !== undefined && startRecord !== null)
            url_ += "startRecord=" + encodeURIComponent("" + startRecord) + "&";
        if (maxRecords !== undefined && maxRecords !== null)
            url_ += "maxRecords=" + encodeURIComponent("" + maxRecords) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoadStaffShifts(_response);
        });
    }

    protected processLoadStaffShifts(response: Response): Promise<Shift[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Shift.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Shift[]>(null as any);
    }

    /**
     * @param loadAllEmployees (optional) 
     * @param includeLoaned (optional) 
     * @param page (optional) 
     * @param pageSize (optional) 
     * @param authorization access token
     * @return OK
     */
    loadStaffShiftsV2(startDate: Date, endDate: Date, loadAllEmployees: boolean | null | undefined, includeLoaned: boolean | null | undefined, page: number | null | undefined, pageSize: number | null | undefined, authorization: string): Promise<Shift[]> {
        let url_ = this.baseUrl + "/api/shifts/v2/staff?";
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined and cannot be null.");
        else
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined and cannot be null.");
        else
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (loadAllEmployees !== undefined && loadAllEmployees !== null)
            url_ += "loadAllEmployees=" + encodeURIComponent("" + loadAllEmployees) + "&";
        if (includeLoaned !== undefined && includeLoaned !== null)
            url_ += "includeLoaned=" + encodeURIComponent("" + includeLoaned) + "&";
        if (page !== undefined && page !== null)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoadStaffShiftsV2(_response);
        });
    }

    protected processLoadStaffShiftsV2(response: Response): Promise<Shift[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Shift[]>(null as any);
    }

    /**
     * @param startRecord (optional) 
     * @param maxRecords (optional) 
     * @param authorization access token
     * @return OK
     */
    loadStaffShiftsSwappable(swapId: number, startDate: Date, endDate: Date, startRecord: number | null | undefined, maxRecords: number | null | undefined, authorization: string): Promise<Shift[]> {
        let url_ = this.baseUrl + "/api/shifts/staffswappable?";
        if (swapId === undefined || swapId === null)
            throw new Error("The parameter 'swapId' must be defined and cannot be null.");
        else
            url_ += "swapId=" + encodeURIComponent("" + swapId) + "&";
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined and cannot be null.");
        else
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined and cannot be null.");
        else
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (startRecord !== undefined && startRecord !== null)
            url_ += "startRecord=" + encodeURIComponent("" + startRecord) + "&";
        if (maxRecords !== undefined && maxRecords !== null)
            url_ += "maxRecords=" + encodeURIComponent("" + maxRecords) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoadStaffShiftsSwappable(_response);
        });
    }

    protected processLoadStaffShiftsSwappable(response: Response): Promise<Shift[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Shift.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Shift[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    loadStaffingTimes(startDate: string, endDate: string, authorization: string): Promise<Shift[]> {
        let url_ = this.baseUrl + "/api/shifts/staffingtimes?";
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined and cannot be null.");
        else
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined and cannot be null.");
        else
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoadStaffingTimes(_response);
        });
    }

    protected processLoadStaffingTimes(response: Response): Promise<Shift[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Shift.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Shift[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    loadHolidays(dateFrom: string, dateTo: string, authorization: string): Promise<Date[]> {
        let url_ = this.baseUrl + "/api/shifts/holidays?";
        if (dateFrom === undefined || dateFrom === null)
            throw new Error("The parameter 'dateFrom' must be defined and cannot be null.");
        else
            url_ += "dateFrom=" + encodeURIComponent("" + dateFrom) + "&";
        if (dateTo === undefined || dateTo === null)
            throw new Error("The parameter 'dateTo' must be defined and cannot be null.");
        else
            url_ += "dateTo=" + encodeURIComponent("" + dateTo) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoadHolidays(_response);
        });
    }

    protected processLoadHolidays(response: Response): Promise<Date[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(new Date(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Date[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    breaks11HourRule(startDate: string, endDate: string, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/shifts/breaks11hourrule?";
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined and cannot be null.");
        else
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined and cannot be null.");
        else
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBreaks11HourRule(_response);
        });
    }

    protected processBreaks11HourRule(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    breaks36HourRule(startDate: string, endDate: string, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/shifts/breaks36hourrule?";
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined and cannot be null.");
        else
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined and cannot be null.");
        else
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBreaks36HourRule(_response);
        });
    }

    protected processBreaks36HourRule(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    postSync(id: number, shiftRegisterEmployeeMealDeductionPostRequest: ShiftRegisterEmployeeMealDeductionPostRequest, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/shifts/{id}/registeremployeemealdeduction";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(shiftRegisterEmployeeMealDeductionPostRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostSync(_response);
        });
    }

    protected processPostSync(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }
}

export class StaffClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param loadAllEmployees (optional) 
     * @param page (optional) 
     * @param pageSize (optional) 
     * @param organisationUnit (optional) 
     * @param authorization access token
     * @return OK
     */
    getV2(startDate: Date, endDate: Date, loadAllEmployees: boolean | null | undefined, page: number | null | undefined, pageSize: number | null | undefined, organisationUnit: number | null | undefined, authorization: string): Promise<AvailableV2[]> {
        let url_ = this.baseUrl + "/api/staff/v2?";
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined and cannot be null.");
        else
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined and cannot be null.");
        else
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (loadAllEmployees !== undefined && loadAllEmployees !== null)
            url_ += "loadAllEmployees=" + encodeURIComponent("" + loadAllEmployees) + "&";
        if (page !== undefined && page !== null)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (organisationUnit !== undefined && organisationUnit !== null)
            url_ += "organisationUnit=" + encodeURIComponent("" + organisationUnit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetV2(_response);
        });
    }

    protected processGetV2(response: Response): Promise<AvailableV2[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AvailableV2.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AvailableV2[]>(null as any);
    }

    /**
     * @param loadAllEmployees (optional) 
     * @param startRecord (optional) 
     * @param maxRecords (optional) 
     * @param authorization access token
     * @return OK
     */
    get(startDate: Date, endDate: Date, loadAllEmployees: boolean | null | undefined, startRecord: number | null | undefined, maxRecords: number | null | undefined, authorization: string): Promise<Available[]> {
        let url_ = this.baseUrl + "/api/staff?";
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined and cannot be null.");
        else
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined and cannot be null.");
        else
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (loadAllEmployees !== undefined && loadAllEmployees !== null)
            url_ += "loadAllEmployees=" + encodeURIComponent("" + loadAllEmployees) + "&";
        if (startRecord !== undefined && startRecord !== null)
            url_ += "startRecord=" + encodeURIComponent("" + startRecord) + "&";
        if (maxRecords !== undefined && maxRecords !== null)
            url_ += "maxRecords=" + encodeURIComponent("" + maxRecords) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<Available[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Available.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Available[]>(null as any);
    }
}

export class StartInfoClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    get(authorization: string): Promise<Navigation[]> {
        let url_ = this.baseUrl + "/api/startinfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<Navigation[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Navigation.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Navigation[]>(null as any);
    }
}

export class SurveyClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    answer(survey: Survey, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/survey/answer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(survey);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAnswer(_response);
        });
    }

    protected processAnswer(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    get(id: number, authorization: string): Promise<Survey> {
        let url_ = this.baseUrl + "/api/survey/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<Survey> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Survey.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Survey>(null as any);
    }
}

export class SurveysClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    relay(request: any, authorization: string): Promise<any> {
        let url_ = this.baseUrl + "/api/surveys/getsurveyquestions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRelay(_response);
        });
    }

    protected processRelay(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    relay2(request: any, authorization: string): Promise<any> {
        let url_ = this.baseUrl + "/api/surveys/addsurveyanswers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRelay2(_response);
        });
    }

    protected processRelay2(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    relay3(request: any, authorization: string): Promise<any> {
        let url_ = this.baseUrl + "/api/surveys/editsurveyanswers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRelay3(_response);
        });
    }

    protected processRelay3(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }
}

export class TimeReportsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param timeReportsGetRequest_startDate (optional) 
     * @param timeReportsGetRequest_endDate (optional) 
     * @param authorization access token
     * @return OK
     */
    get(timeReportsGetRequest_startDate: Date | null | undefined, timeReportsGetRequest_endDate: Date | null | undefined, authorization: string): Promise<TimeReport[]> {
        let url_ = this.baseUrl + "/api/timereports?";
        if (timeReportsGetRequest_startDate !== undefined && timeReportsGetRequest_startDate !== null)
            url_ += "timeReportsGetRequest.startDate=" + encodeURIComponent(timeReportsGetRequest_startDate ? "" + timeReportsGetRequest_startDate.toISOString() : "") + "&";
        if (timeReportsGetRequest_endDate !== undefined && timeReportsGetRequest_endDate !== null)
            url_ += "timeReportsGetRequest.endDate=" + encodeURIComponent(timeReportsGetRequest_endDate ? "" + timeReportsGetRequest_endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<TimeReport[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TimeReport.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TimeReport[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    getActive(authorization: string): Promise<TimeReportStatus> {
        let url_ = this.baseUrl + "/api/timereports/active";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetActive(_response);
        });
    }

    protected processGetActive(response: Response): Promise<TimeReportStatus> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TimeReportStatus.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TimeReportStatus>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    getOptions(authorization: string): Promise<TimeReportOptions> {
        let url_ = this.baseUrl + "/api/timereports/options";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOptions(_response);
        });
    }

    protected processGetOptions(response: Response): Promise<TimeReportOptions> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TimeReportOptions.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TimeReportOptions>(null as any);
    }

    /**
     * @param timeReportsSyncGetRequest_startDate (optional) 
     * @param timeReportsSyncGetRequest_endDate (optional) 
     * @param authorization access token
     * @return OK
     */
    getSync(timeReportsSyncGetRequest_startDate: Date | null | undefined, timeReportsSyncGetRequest_endDate: Date | null | undefined, authorization: string): Promise<TimeReportsSyncStatus> {
        let url_ = this.baseUrl + "/api/timereports/sync?";
        if (timeReportsSyncGetRequest_startDate !== undefined && timeReportsSyncGetRequest_startDate !== null)
            url_ += "timeReportsSyncGetRequest.startDate=" + encodeURIComponent(timeReportsSyncGetRequest_startDate ? "" + timeReportsSyncGetRequest_startDate.toISOString() : "") + "&";
        if (timeReportsSyncGetRequest_endDate !== undefined && timeReportsSyncGetRequest_endDate !== null)
            url_ += "timeReportsSyncGetRequest.endDate=" + encodeURIComponent(timeReportsSyncGetRequest_endDate ? "" + timeReportsSyncGetRequest_endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSync(_response);
        });
    }

    protected processGetSync(response: Response): Promise<TimeReportsSyncStatus> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TimeReportsSyncStatus.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TimeReportsSyncStatus>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    postSync(timeReportsSyncPostRequest: TimeReportsSyncPostRequest, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/timereports/sync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(timeReportsSyncPostRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostSync(_response);
        });
    }

    protected processPostSync(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    getCategories(authorization: string): Promise<TimeReportCategory[]> {
        let url_ = this.baseUrl + "/api/timereports/categories";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCategories(_response);
        });
    }

    protected processGetCategories(response: Response): Promise<TimeReportCategory[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TimeReportCategory.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TimeReportCategory[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    getRegisteredDeviationCategories(authorization: string): Promise<TimeReportRegisteredDeviationCategory[]> {
        let url_ = this.baseUrl + "/api/timereports/deviationcategories";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRegisteredDeviationCategories(_response);
        });
    }

    protected processGetRegisteredDeviationCategories(response: Response): Promise<TimeReportRegisteredDeviationCategory[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TimeReportRegisteredDeviationCategory.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TimeReportRegisteredDeviationCategory[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    postEdit(timeReportEditPostRequest: TimeReportEditPostRequest, authorization: string): Promise<TimeReport> {
        let url_ = this.baseUrl + "/api/timereports/edit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(timeReportEditPostRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostEdit(_response);
        });
    }

    protected processPostEdit(response: Response): Promise<TimeReport> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TimeReport.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TimeReport>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    postIn(timeReportInOutPostRequest: TimeReportInOutPostRequest, authorization: string): Promise<TimeReportStatus> {
        let url_ = this.baseUrl + "/api/timereports/in";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(timeReportInOutPostRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostIn(_response);
        });
    }

    protected processPostIn(response: Response): Promise<TimeReportStatus> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TimeReportStatus.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TimeReportStatus>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    postOut(timeReportInOutPostRequest: TimeReportInOutPostRequest, authorization: string): Promise<TimeReportStatus> {
        let url_ = this.baseUrl + "/api/timereports/out";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(timeReportInOutPostRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostOut(_response);
        });
    }

    protected processPostOut(response: Response): Promise<TimeReportStatus> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TimeReportStatus.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TimeReportStatus>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    postComment(timeReportSetEmployeeCommentPostRequest: TimeReportSetEmployeeCommentPostRequest, authorization: string): Promise<TimeReportStatus> {
        let url_ = this.baseUrl + "/api/timereports/comment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(timeReportSetEmployeeCommentPostRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostComment(_response);
        });
    }

    protected processPostComment(response: Response): Promise<TimeReportStatus> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TimeReportStatus.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TimeReportStatus>(null as any);
    }
}

export class TranslationsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    get(languageCode: string, authorization: string): Promise<Translation[]> {
        let url_ = this.baseUrl + "/api/translations/{languagecode}";
        if (languageCode === undefined || languageCode === null)
            throw new Error("The parameter 'languageCode' must be defined.");
        url_ = url_.replace("{languageCode}", encodeURIComponent("" + languageCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<Translation[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Translation.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Translation[]>(null as any);
    }

    /**
     * @return OK
     */
    preGet(languageCode: string): Promise<Translation[]> {
        let url_ = this.baseUrl + "/api/translations/pre/{languagecode}";
        if (languageCode === undefined || languageCode === null)
            throw new Error("The parameter 'languageCode' must be defined.");
        url_ = url_.replace("{languageCode}", encodeURIComponent("" + languageCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPreGet(_response);
        });
    }

    protected processPreGet(response: Response): Promise<Translation[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Translation.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Translation[]>(null as any);
    }
}

export class UsersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    getSingleUser(authorization: string): Promise<User> {
        let url_ = this.baseUrl + "/api/users/employeeinfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSingleUser(_response);
        });
    }

    protected processGetSingleUser(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    setSingleUser(user: User, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/users/employeeinfo/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetSingleUser(_response);
        });
    }

    protected processSetSingleUser(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    getCustomerCategories(authorization: string): Promise<Category[]> {
        let url_ = this.baseUrl + "/api/users/customercategories";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCustomerCategories(_response);
        });
    }

    protected processGetCustomerCategories(response: Response): Promise<Category[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Category.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Category[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    updateEmployeePreferences(userPreferences: User, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/users/employeepreferences";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userPreferences);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateEmployeePreferences(_response);
        });
    }

    protected processUpdateEmployeePreferences(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    updateEmployeePasswords(userPreferences: User, authorization: string): Promise<number> {
        let url_ = this.baseUrl + "/api/users/password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userPreferences);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateEmployeePasswords(_response);
        });
    }

    protected processUpdateEmployeePasswords(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    setUserImage(authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/users/set/image";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetUserImage(_response);
        });
    }

    protected processSetUserImage(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    resetUserImage(authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/users/reset/image";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processResetUserImage(_response);
        });
    }

    protected processResetUserImage(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    recoverPassword(): Promise<number> {
        let url_ = this.baseUrl + "/api/users/recoverpassword";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRecoverPassword(_response);
        });
    }

    protected processRecoverPassword(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    get(authorization: string): Promise<UserLimited[]> {
        let url_ = this.baseUrl + "/api/users";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<UserLimited[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserLimited.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserLimited[]>(null as any);
    }

    /**
     * @param authorization access token
     * @return OK
     */
    post(user: User, authorization: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }
}

export class VacationInfoClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        if (http && typeof http.fetch === 'function') {
            this.http = http;
        } else if (typeof window !== 'undefined') {
            this.http = window as any;
        } else {
            this.http = { fetch };
        }
        
        this.baseUrl = baseUrl ?? "https://ipool-2-0-api.azurewebsites.net";
    }

    /**
     * @param authorization access token
     * @return OK
     */
    get(dateFr: Date, authorization: string): Promise<VacationInfo> {
        let url_ = this.baseUrl + "/api/vacationinfo?";
        if (dateFr === undefined || dateFr === null)
            throw new Error("The parameter 'dateFr' must be defined and cannot be null.");
        else
            url_ += "dateFr=" + encodeURIComponent(dateFr ? "" + dateFr.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "Bearer " + authorization : "",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<VacationInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VacationInfo.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VacationInfo>(null as any);
    }
}

export class AppRatingOption implements IAppRatingOption {

    constructor(data?: IAppRatingOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AppRatingOption {
        data = typeof data === 'object' ? data : {};
        let result = new AppRatingOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAppRatingOption {
}

export class AppRateButton implements IAppRateButton {
    button?: number | undefined;

    constructor(data?: IAppRateButton) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.button = _data["button"];
        }
    }

    static fromJS(data: any): AppRateButton {
        data = typeof data === 'object' ? data : {};
        let result = new AppRateButton();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["button"] = this.button;
        return data;
    }
}

export interface IAppRateButton {
    button?: number | undefined;
}

export class AttitudeSurveyPeriodPollQuestion implements IAttitudeSurveyPeriodPollQuestion {
    iD?: number | undefined;
    pollIntervalID?: number | undefined;
    intervalStartUtc?: Date | undefined;
    intervalEndUtc?: Date | undefined;
    intervalDurationHours?: number | undefined;
    responseIntervalStartUtc?: Date | undefined;
    responseIntervalEndUtc?: Date | undefined;
    responseIntervalDurationHours?: number | undefined;

    constructor(data?: IAttitudeSurveyPeriodPollQuestion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.pollIntervalID = _data["PollIntervalID"];
            this.intervalStartUtc = _data["IntervalStartUtc"] ? new Date(_data["IntervalStartUtc"].toString()) : <any>undefined;
            this.intervalEndUtc = _data["IntervalEndUtc"] ? new Date(_data["IntervalEndUtc"].toString()) : <any>undefined;
            this.intervalDurationHours = _data["IntervalDurationHours"];
            this.responseIntervalStartUtc = _data["ResponseIntervalStartUtc"] ? new Date(_data["ResponseIntervalStartUtc"].toString()) : <any>undefined;
            this.responseIntervalEndUtc = _data["ResponseIntervalEndUtc"] ? new Date(_data["ResponseIntervalEndUtc"].toString()) : <any>undefined;
            this.responseIntervalDurationHours = _data["ResponseIntervalDurationHours"];
        }
    }

    static fromJS(data: any): AttitudeSurveyPeriodPollQuestion {
        data = typeof data === 'object' ? data : {};
        let result = new AttitudeSurveyPeriodPollQuestion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["PollIntervalID"] = this.pollIntervalID;
        data["IntervalStartUtc"] = this.intervalStartUtc ? this.intervalStartUtc.toISOString() : <any>undefined;
        data["IntervalEndUtc"] = this.intervalEndUtc ? this.intervalEndUtc.toISOString() : <any>undefined;
        data["IntervalDurationHours"] = this.intervalDurationHours;
        data["ResponseIntervalStartUtc"] = this.responseIntervalStartUtc ? this.responseIntervalStartUtc.toISOString() : <any>undefined;
        data["ResponseIntervalEndUtc"] = this.responseIntervalEndUtc ? this.responseIntervalEndUtc.toISOString() : <any>undefined;
        data["ResponseIntervalDurationHours"] = this.responseIntervalDurationHours;
        return data;
    }
}

export interface IAttitudeSurveyPeriodPollQuestion {
    iD?: number | undefined;
    pollIntervalID?: number | undefined;
    intervalStartUtc?: Date | undefined;
    intervalEndUtc?: Date | undefined;
    intervalDurationHours?: number | undefined;
    responseIntervalStartUtc?: Date | undefined;
    responseIntervalEndUtc?: Date | undefined;
    responseIntervalDurationHours?: number | undefined;
}

export class AttitudeSurveyPeriodPollQuestionResponsePostRequest implements IAttitudeSurveyPeriodPollQuestionResponsePostRequest {
    questionID?: number | undefined;
    responseID?: number | undefined;
    responseQuantity?: number | undefined;
    responseExtended?: boolean | undefined;
    responseMessage?: string | undefined;

    constructor(data?: IAttitudeSurveyPeriodPollQuestionResponsePostRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.questionID = _data["QuestionID"];
            this.responseID = _data["ResponseID"];
            this.responseQuantity = _data["ResponseQuantity"];
            this.responseExtended = _data["ResponseExtended"];
            this.responseMessage = _data["ResponseMessage"];
        }
    }

    static fromJS(data: any): AttitudeSurveyPeriodPollQuestionResponsePostRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AttitudeSurveyPeriodPollQuestionResponsePostRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["QuestionID"] = this.questionID;
        data["ResponseID"] = this.responseID;
        data["ResponseQuantity"] = this.responseQuantity;
        data["ResponseExtended"] = this.responseExtended;
        data["ResponseMessage"] = this.responseMessage;
        return data;
    }
}

export interface IAttitudeSurveyPeriodPollQuestionResponsePostRequest {
    questionID?: number | undefined;
    responseID?: number | undefined;
    responseQuantity?: number | undefined;
    responseExtended?: boolean | undefined;
    responseMessage?: string | undefined;
}

export class Category implements ICategory {

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ICategory {
}

export class LeaveCategories implements ILeaveCategories {

    constructor(data?: ILeaveCategories) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): LeaveCategories {
        data = typeof data === 'object' ? data : {};
        let result = new LeaveCategories();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ILeaveCategories {
}

export class AllLeaveCategories implements IAllLeaveCategories {

    constructor(data?: IAllLeaveCategories) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AllLeaveCategories {
        data = typeof data === 'object' ? data : {};
        let result = new AllLeaveCategories();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAllLeaveCategories {
}

export class CategoryGroup implements ICategoryGroup {

    constructor(data?: ICategoryGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): CategoryGroup {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ICategoryGroup {
}

export class Conversation implements IConversation {

    constructor(data?: IConversation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Conversation {
        data = typeof data === 'object' ? data : {};
        let result = new Conversation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IConversation {
}

export class Message implements IMessage {

    constructor(data?: IMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Message {
        data = typeof data === 'object' ? data : {};
        let result = new Message();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IMessage {
}

export class Customer implements ICustomer {

    constructor(data?: ICustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Customer {
        data = typeof data === 'object' ? data : {};
        let result = new Customer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ICustomer {
}

export class ExternalCalendarPostRequest implements IExternalCalendarPostRequest {
    show?: boolean | undefined;

    constructor(data?: IExternalCalendarPostRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.show = _data["show"];
        }
    }

    static fromJS(data: any): ExternalCalendarPostRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalCalendarPostRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["show"] = this.show;
        return data;
    }
}

export interface IExternalCalendarPostRequest {
    show?: boolean | undefined;
}

export class Language implements ILanguage {

    constructor(data?: ILanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Language {
        data = typeof data === 'object' ? data : {};
        let result = new Language();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ILanguage {
}

export class LoginResult implements ILoginResult {

    constructor(data?: ILoginResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): LoginResult {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ILoginResult {
}

export class MessageInfo implements IMessageInfo {
    idConversation?: number | undefined;
    receivers?: number[] | undefined;
    subject?: string | undefined;
    messageStr?: string | undefined;

    constructor(data?: IMessageInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idConversation = _data["IdConversation"];
            if (Array.isArray(_data["Receivers"])) {
                this.receivers = [] as any;
                for (let item of _data["Receivers"])
                    this.receivers!.push(item);
            }
            this.subject = _data["Subject"];
            this.messageStr = _data["MessageStr"];
        }
    }

    static fromJS(data: any): MessageInfo {
        data = typeof data === 'object' ? data : {};
        let result = new MessageInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IdConversation"] = this.idConversation;
        if (Array.isArray(this.receivers)) {
            data["Receivers"] = [];
            for (let item of this.receivers)
                data["Receivers"].push(item);
        }
        data["Subject"] = this.subject;
        data["MessageStr"] = this.messageStr;
        return data;
    }
}

export interface IMessageInfo {
    idConversation?: number | undefined;
    receivers?: number[] | undefined;
    subject?: string | undefined;
    messageStr?: string | undefined;
}

export class MessageStatus implements IMessageStatus {
    convId?: number | undefined;
    type?: string | undefined;
    setDate?: boolean | undefined;
    setRemoved?: boolean | undefined;
    setUnread?: boolean | undefined;
    answerYesNo?: boolean | undefined;

    constructor(data?: IMessageStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.convId = _data["ConvId"];
            this.type = _data["Type"];
            this.setDate = _data["SetDate"];
            this.setRemoved = _data["SetRemoved"];
            this.setUnread = _data["SetUnread"];
            this.answerYesNo = _data["AnswerYesNo"];
        }
    }

    static fromJS(data: any): MessageStatus {
        data = typeof data === 'object' ? data : {};
        let result = new MessageStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ConvId"] = this.convId;
        data["Type"] = this.type;
        data["SetDate"] = this.setDate;
        data["SetRemoved"] = this.setRemoved;
        data["SetUnread"] = this.setUnread;
        data["AnswerYesNo"] = this.answerYesNo;
        return data;
    }
}

export interface IMessageStatus {
    convId?: number | undefined;
    type?: string | undefined;
    setDate?: boolean | undefined;
    setRemoved?: boolean | undefined;
    setUnread?: boolean | undefined;
    answerYesNo?: boolean | undefined;
}

export class OfficeFiles implements IOfficeFiles {

    constructor(data?: IOfficeFiles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): OfficeFiles {
        data = typeof data === 'object' ? data : {};
        let result = new OfficeFiles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IOfficeFiles {
}

export class IpCats implements IIpCats {

    constructor(data?: IIpCats) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpCats {
        data = typeof data === 'object' ? data : {};
        let result = new IpCats();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpCats {
}

export class IpHeaders implements IIpHeaders {

    constructor(data?: IIpHeaders) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpHeaders {
        data = typeof data === 'object' ? data : {};
        let result = new IpHeaders();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpHeaders {
}

export class IpPersons_Cats implements IIpPersons_Cats {

    constructor(data?: IIpPersons_Cats) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpPersons_Cats {
        data = typeof data === 'object' ? data : {};
        let result = new IpPersons_Cats();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpPersons_Cats {
}

export class IpLoanApplications implements IIpLoanApplications {

    constructor(data?: IIpLoanApplications) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpLoanApplications {
        data = typeof data === 'object' ? data : {};
        let result = new IpLoanApplications();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpLoanApplications {
}

export class IpLoanSourceStates implements IIpLoanSourceStates {

    constructor(data?: IIpLoanSourceStates) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpLoanSourceStates {
        data = typeof data === 'object' ? data : {};
        let result = new IpLoanSourceStates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpLoanSourceStates {
}

export class IpDocuments implements IIpDocuments {

    constructor(data?: IIpDocuments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpDocuments {
        data = typeof data === 'object' ? data : {};
        let result = new IpDocuments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpDocuments {
}

export class IpPushNotificationOrganisationUnitCategoryPreferences implements IIpPushNotificationOrganisationUnitCategoryPreferences {

    constructor(data?: IIpPushNotificationOrganisationUnitCategoryPreferences) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpPushNotificationOrganisationUnitCategoryPreferences {
        data = typeof data === 'object' ? data : {};
        let result = new IpPushNotificationOrganisationUnitCategoryPreferences();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpPushNotificationOrganisationUnitCategoryPreferences {
}

export class IpPersons_Employments implements IIpPersons_Employments {

    constructor(data?: IIpPersons_Employments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpPersons_Employments {
        data = typeof data === 'object' ? data : {};
        let result = new IpPersons_Employments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpPersons_Employments {
}

export class IpPushNotificationOrganisationSubUnitCategoryPreferences implements IIpPushNotificationOrganisationSubUnitCategoryPreferences {

    constructor(data?: IIpPushNotificationOrganisationSubUnitCategoryPreferences) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpPushNotificationOrganisationSubUnitCategoryPreferences {
        data = typeof data === 'object' ? data : {};
        let result = new IpPushNotificationOrganisationSubUnitCategoryPreferences();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpPushNotificationOrganisationSubUnitCategoryPreferences {
}

export class IpApiResourceOrganisationSubUnitIdentifiers implements IIpApiResourceOrganisationSubUnitIdentifiers {

    constructor(data?: IIpApiResourceOrganisationSubUnitIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceOrganisationSubUnitIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceOrganisationSubUnitIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceOrganisationSubUnitIdentifiers {
}

export class IpApiResourceOrganisationUnitIdentifiers implements IIpApiResourceOrganisationUnitIdentifiers {

    constructor(data?: IIpApiResourceOrganisationUnitIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceOrganisationUnitIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceOrganisationUnitIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceOrganisationUnitIdentifiers {
}

export class IpExternalSystemOrganisationUnitIdentifiers implements IIpExternalSystemOrganisationUnitIdentifiers {

    constructor(data?: IIpExternalSystemOrganisationUnitIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemOrganisationUnitIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemOrganisationUnitIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemOrganisationUnitIdentifiers {
}

export class IpExternalSystemOrganisationSubUnitIdentifiers implements IIpExternalSystemOrganisationSubUnitIdentifiers {

    constructor(data?: IIpExternalSystemOrganisationSubUnitIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemOrganisationSubUnitIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemOrganisationSubUnitIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemOrganisationSubUnitIdentifiers {
}

export class IpOrganisationUnitAndSubUnitGroupsCategories implements IIpOrganisationUnitAndSubUnitGroupsCategories {

    constructor(data?: IIpOrganisationUnitAndSubUnitGroupsCategories) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpOrganisationUnitAndSubUnitGroupsCategories {
        data = typeof data === 'object' ? data : {};
        let result = new IpOrganisationUnitAndSubUnitGroupsCategories();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpOrganisationUnitAndSubUnitGroupsCategories {
}

export class IpTimeReportScheduledFragments implements IIpTimeReportScheduledFragments {

    constructor(data?: IIpTimeReportScheduledFragments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportScheduledFragments {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportScheduledFragments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportScheduledFragments {
}

export class IpTimeReportApprovedFragments implements IIpTimeReportApprovedFragments {

    constructor(data?: IIpTimeReportApprovedFragments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportApprovedFragments {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportApprovedFragments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportApprovedFragments {
}

export class IpTimeReportRegisteredScheduledFragments implements IIpTimeReportRegisteredScheduledFragments {

    constructor(data?: IIpTimeReportRegisteredScheduledFragments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportRegisteredScheduledFragments {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportRegisteredScheduledFragments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportRegisteredScheduledFragments {
}

export class IpTimeReportScheduledAbsenceFragments implements IIpTimeReportScheduledAbsenceFragments {

    constructor(data?: IIpTimeReportScheduledAbsenceFragments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportScheduledAbsenceFragments {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportScheduledAbsenceFragments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportScheduledAbsenceFragments {
}

export class IpTimeReportApprovedAbsenceFragments implements IIpTimeReportApprovedAbsenceFragments {

    constructor(data?: IIpTimeReportApprovedAbsenceFragments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportApprovedAbsenceFragments {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportApprovedAbsenceFragments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportApprovedAbsenceFragments {
}

export class IpTimeReportRegisteredFragments implements IIpTimeReportRegisteredFragments {

    constructor(data?: IIpTimeReportRegisteredFragments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportRegisteredFragments {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportRegisteredFragments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportRegisteredFragments {
}

export class IpTimeReportScheduledBreakFragments implements IIpTimeReportScheduledBreakFragments {

    constructor(data?: IIpTimeReportScheduledBreakFragments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportScheduledBreakFragments {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportScheduledBreakFragments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportScheduledBreakFragments {
}

export class IpTimeReportApprovedBreakFragments implements IIpTimeReportApprovedBreakFragments {

    constructor(data?: IIpTimeReportApprovedBreakFragments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportApprovedBreakFragments {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportApprovedBreakFragments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportApprovedBreakFragments {
}

export class IpEmployments implements IIpEmployments {

    constructor(data?: IIpEmployments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpEmployments {
        data = typeof data === 'object' ? data : {};
        let result = new IpEmployments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpEmployments {
}

export class IpOrganisationSubUnitGroups implements IIpOrganisationSubUnitGroups {

    constructor(data?: IIpOrganisationSubUnitGroups) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpOrganisationSubUnitGroups {
        data = typeof data === 'object' ? data : {};
        let result = new IpOrganisationSubUnitGroups();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpOrganisationSubUnitGroups {
}

export class IpOrganisationUnitGroups implements IIpOrganisationUnitGroups {

    constructor(data?: IIpOrganisationUnitGroups) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpOrganisationUnitGroups {
        data = typeof data === 'object' ? data : {};
        let result = new IpOrganisationUnitGroups();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpOrganisationUnitGroups {
}

export class IpPersons implements IIpPersons {

    constructor(data?: IIpPersons) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpPersons {
        data = typeof data === 'object' ? data : {};
        let result = new IpPersons();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpPersons {
}

export class IpCustomers implements IIpCustomers {

    constructor(data?: IIpCustomers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpCustomers {
        data = typeof data === 'object' ? data : {};
        let result = new IpCustomers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpCustomers {
}

export class IpUsers implements IIpUsers {

    constructor(data?: IIpUsers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpUsers {
        data = typeof data === 'object' ? data : {};
        let result = new IpUsers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpUsers {
}

export class IpDocumentNotifications implements IIpDocumentNotifications {

    constructor(data?: IIpDocumentNotifications) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpDocumentNotifications {
        data = typeof data === 'object' ? data : {};
        let result = new IpDocumentNotifications();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpDocumentNotifications {
}

export class IpApiResourceEmploymentIdentifiers implements IIpApiResourceEmploymentIdentifiers {

    constructor(data?: IIpApiResourceEmploymentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceEmploymentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceEmploymentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceEmploymentIdentifiers {
}

export class IpExternalSystemEmploymentIdentifiers implements IIpExternalSystemEmploymentIdentifiers {

    constructor(data?: IIpExternalSystemEmploymentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemEmploymentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemEmploymentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemEmploymentIdentifiers {
}

export class IpExternalSystems implements IIpExternalSystems {

    constructor(data?: IIpExternalSystems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystems {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystems {
}

export class IpApiResourceTimeReportScheduledFragmentIdentifiers implements IIpApiResourceTimeReportScheduledFragmentIdentifiers {

    constructor(data?: IIpApiResourceTimeReportScheduledFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportScheduledFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportScheduledFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportScheduledFragmentIdentifiers {
}

export class IpExternalSystemTimeReportScheduledFragmentIdentifiers implements IIpExternalSystemTimeReportScheduledFragmentIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportScheduledFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportScheduledFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportScheduledFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportScheduledFragmentIdentifiers {
}

export class IpTimeReports implements IIpTimeReports {

    constructor(data?: IIpTimeReports) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReports {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReports();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReports {
}

export class IpApiResourceTimeReportApprovedFragmentIdentifiers implements IIpApiResourceTimeReportApprovedFragmentIdentifiers {

    constructor(data?: IIpApiResourceTimeReportApprovedFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportApprovedFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportApprovedFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportApprovedFragmentIdentifiers {
}

export class IpExternalSystemTimeReportApprovedFragmentIdentifiers implements IIpExternalSystemTimeReportApprovedFragmentIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportApprovedFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportApprovedFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportApprovedFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportApprovedFragmentIdentifiers {
}

export class IpTimeReportCategories implements IIpTimeReportCategories {

    constructor(data?: IIpTimeReportCategories) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportCategories {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportCategories();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportCategories {
}

export class IpApiResourceTimeReportRegisteredScheduledFragmentIdentifiers implements IIpApiResourceTimeReportRegisteredScheduledFragmentIdentifiers {

    constructor(data?: IIpApiResourceTimeReportRegisteredScheduledFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportRegisteredScheduledFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportRegisteredScheduledFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportRegisteredScheduledFragmentIdentifiers {
}

export class IpExternalSystemTimeReportRegisteredScheduledFragmentIdentifiers implements IIpExternalSystemTimeReportRegisteredScheduledFragmentIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportRegisteredScheduledFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportRegisteredScheduledFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportRegisteredScheduledFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportRegisteredScheduledFragmentIdentifiers {
}

export class IpTimeReportRegisteredDeviationCategories implements IIpTimeReportRegisteredDeviationCategories {

    constructor(data?: IIpTimeReportRegisteredDeviationCategories) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportRegisteredDeviationCategories {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportRegisteredDeviationCategories();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportRegisteredDeviationCategories {
}

export class IpApiResourceTimeReportScheduledAbsenceFragmentIdentifiers implements IIpApiResourceTimeReportScheduledAbsenceFragmentIdentifiers {

    constructor(data?: IIpApiResourceTimeReportScheduledAbsenceFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportScheduledAbsenceFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportScheduledAbsenceFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportScheduledAbsenceFragmentIdentifiers {
}

export class IpExternalSystemTimeReportScheduledAbsenceFragmentIdentifiers implements IIpExternalSystemTimeReportScheduledAbsenceFragmentIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportScheduledAbsenceFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportScheduledAbsenceFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportScheduledAbsenceFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportScheduledAbsenceFragmentIdentifiers {
}

export class IpApiResourceTimeReportApprovedAbsenceFragmentIdentifiers implements IIpApiResourceTimeReportApprovedAbsenceFragmentIdentifiers {

    constructor(data?: IIpApiResourceTimeReportApprovedAbsenceFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportApprovedAbsenceFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportApprovedAbsenceFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportApprovedAbsenceFragmentIdentifiers {
}

export class IpExternalSystemTimeReportApprovedAbsenceFragmentIdentifiers implements IIpExternalSystemTimeReportApprovedAbsenceFragmentIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportApprovedAbsenceFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportApprovedAbsenceFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportApprovedAbsenceFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportApprovedAbsenceFragmentIdentifiers {
}

export class IpApiResourceTimeReportRegisteredFragmentIdentifiers implements IIpApiResourceTimeReportRegisteredFragmentIdentifiers {

    constructor(data?: IIpApiResourceTimeReportRegisteredFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportRegisteredFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportRegisteredFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportRegisteredFragmentIdentifiers {
}

export class IpExternalSystemTimeReportRegisteredFragmentIdentifiers implements IIpExternalSystemTimeReportRegisteredFragmentIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportRegisteredFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportRegisteredFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportRegisteredFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportRegisteredFragmentIdentifiers {
}

export class IpApiResourceTimeReportScheduledBreakFragmentIdentifiers implements IIpApiResourceTimeReportScheduledBreakFragmentIdentifiers {

    constructor(data?: IIpApiResourceTimeReportScheduledBreakFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportScheduledBreakFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportScheduledBreakFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportScheduledBreakFragmentIdentifiers {
}

export class IpExternalSystemTimeReportScheduledBreakFragmentIdentifiers implements IIpExternalSystemTimeReportScheduledBreakFragmentIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportScheduledBreakFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportScheduledBreakFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportScheduledBreakFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportScheduledBreakFragmentIdentifiers {
}

export class IpApiResourceTimeReportApprovedBreakFragmentIdentifiers implements IIpApiResourceTimeReportApprovedBreakFragmentIdentifiers {

    constructor(data?: IIpApiResourceTimeReportApprovedBreakFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportApprovedBreakFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportApprovedBreakFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportApprovedBreakFragmentIdentifiers {
}

export class IpExternalSystemTimeReportApprovedBreakFragmentIdentifiers implements IIpExternalSystemTimeReportApprovedBreakFragmentIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportApprovedBreakFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportApprovedBreakFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportApprovedBreakFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportApprovedBreakFragmentIdentifiers {
}

export class IpApiResourceOrganisationSubUnitGroupIdentifiers implements IIpApiResourceOrganisationSubUnitGroupIdentifiers {

    constructor(data?: IIpApiResourceOrganisationSubUnitGroupIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceOrganisationSubUnitGroupIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceOrganisationSubUnitGroupIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceOrganisationSubUnitGroupIdentifiers {
}

export class IpApiResourceOrganisationUnitGroupIdentifiers implements IIpApiResourceOrganisationUnitGroupIdentifiers {

    constructor(data?: IIpApiResourceOrganisationUnitGroupIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceOrganisationUnitGroupIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceOrganisationUnitGroupIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceOrganisationUnitGroupIdentifiers {
}

export class IpExternalSystemOrganisationUnitGroupIdentifiers implements IIpExternalSystemOrganisationUnitGroupIdentifiers {

    constructor(data?: IIpExternalSystemOrganisationUnitGroupIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemOrganisationUnitGroupIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemOrganisationUnitGroupIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemOrganisationUnitGroupIdentifiers {
}

export class IpEmployeeContracts implements IIpEmployeeContracts {

    constructor(data?: IIpEmployeeContracts) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpEmployeeContracts {
        data = typeof data === 'object' ? data : {};
        let result = new IpEmployeeContracts();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpEmployeeContracts {
}

export class IpTtApiSyncErrorLogs implements IIpTtApiSyncErrorLogs {

    constructor(data?: IIpTtApiSyncErrorLogs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTtApiSyncErrorLogs {
        data = typeof data === 'object' ? data : {};
        let result = new IpTtApiSyncErrorLogs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTtApiSyncErrorLogs {
}

export class IpAppRatings implements IIpAppRatings {

    constructor(data?: IIpAppRatings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpAppRatings {
        data = typeof data === 'object' ? data : {};
        let result = new IpAppRatings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpAppRatings {
}

export class IpPushNotificationTypePreferences implements IIpPushNotificationTypePreferences {

    constructor(data?: IIpPushNotificationTypePreferences) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpPushNotificationTypePreferences {
        data = typeof data === 'object' ? data : {};
        let result = new IpPushNotificationTypePreferences();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpPushNotificationTypePreferences {
}

export class IpApiResourcePersonIdentifiers implements IIpApiResourcePersonIdentifiers {

    constructor(data?: IIpApiResourcePersonIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourcePersonIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourcePersonIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourcePersonIdentifiers {
}

export class IpAppErrorLogs implements IIpAppErrorLogs {

    constructor(data?: IIpAppErrorLogs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpAppErrorLogs {
        data = typeof data === 'object' ? data : {};
        let result = new IpAppErrorLogs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpAppErrorLogs {
}

export class IpAttitudeSurveySubjects implements IIpAttitudeSurveySubjects {

    constructor(data?: IIpAttitudeSurveySubjects) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpAttitudeSurveySubjects {
        data = typeof data === 'object' ? data : {};
        let result = new IpAttitudeSurveySubjects();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpAttitudeSurveySubjects {
}

export class IpCrossCustomerConvMailPreferences implements IIpCrossCustomerConvMailPreferences {

    constructor(data?: IIpCrossCustomerConvMailPreferences) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpCrossCustomerConvMailPreferences {
        data = typeof data === 'object' ? data : {};
        let result = new IpCrossCustomerConvMailPreferences();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpCrossCustomerConvMailPreferences {
}

export class IpCrossCustomerStaffingPersons implements IIpCrossCustomerStaffingPersons {

    constructor(data?: IIpCrossCustomerStaffingPersons) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpCrossCustomerStaffingPersons {
        data = typeof data === 'object' ? data : {};
        let result = new IpCrossCustomerStaffingPersons();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpCrossCustomerStaffingPersons {
}

export class IpDeviceNotificationPersonConfigurations implements IIpDeviceNotificationPersonConfigurations {

    constructor(data?: IIpDeviceNotificationPersonConfigurations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpDeviceNotificationPersonConfigurations {
        data = typeof data === 'object' ? data : {};
        let result = new IpDeviceNotificationPersonConfigurations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpDeviceNotificationPersonConfigurations {
}

export class IpDeviceNotificationReceivers implements IIpDeviceNotificationReceivers {

    constructor(data?: IIpDeviceNotificationReceivers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpDeviceNotificationReceivers {
        data = typeof data === 'object' ? data : {};
        let result = new IpDeviceNotificationReceivers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpDeviceNotificationReceivers {
}

export class IpEmailPersonConfigurations implements IIpEmailPersonConfigurations {

    constructor(data?: IIpEmailPersonConfigurations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpEmailPersonConfigurations {
        data = typeof data === 'object' ? data : {};
        let result = new IpEmailPersonConfigurations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpEmailPersonConfigurations {
}

export class IpEmailReceivers implements IIpEmailReceivers {

    constructor(data?: IIpEmailReceivers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpEmailReceivers {
        data = typeof data === 'object' ? data : {};
        let result = new IpEmailReceivers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpEmailReceivers {
}

export class IpExternalCalendars implements IIpExternalCalendars {

    constructor(data?: IIpExternalCalendars) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalCalendars {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalCalendars();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalCalendars {
}

export class IpExternalSystemPersonIdentifiers implements IIpExternalSystemPersonIdentifiers {

    constructor(data?: IIpExternalSystemPersonIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemPersonIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemPersonIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemPersonIdentifiers {
}

export class IpPersonEdits implements IIpPersonEdits {

    constructor(data?: IIpPersonEdits) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpPersonEdits {
        data = typeof data === 'object' ? data : {};
        let result = new IpPersonEdits();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpPersonEdits {
}

export class IpTimeReportSyncs implements IIpTimeReportSyncs {

    constructor(data?: IIpTimeReportSyncs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportSyncs {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportSyncs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportSyncs {
}

export class IpTimeReportPersonSettings implements IIpTimeReportPersonSettings {

    constructor(data?: IIpTimeReportPersonSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportPersonSettings {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportPersonSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportPersonSettings {
}

export class IpTimeReportErrorLogs implements IIpTimeReportErrorLogs {

    constructor(data?: IIpTimeReportErrorLogs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportErrorLogs {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportErrorLogs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportErrorLogs {
}

export class IpEmployeeContracts_Conv implements IIpEmployeeContracts_Conv {

    constructor(data?: IIpEmployeeContracts_Conv) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpEmployeeContracts_Conv {
        data = typeof data === 'object' ? data : {};
        let result = new IpEmployeeContracts_Conv();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpEmployeeContracts_Conv {
}

export class IpCrossCustomerStaffingOrders implements IIpCrossCustomerStaffingOrders {

    constructor(data?: IIpCrossCustomerStaffingOrders) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpCrossCustomerStaffingOrders {
        data = typeof data === 'object' ? data : {};
        let result = new IpCrossCustomerStaffingOrders();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpCrossCustomerStaffingOrders {
}

export class IpUserDefaultSettings implements IIpUserDefaultSettings {

    constructor(data?: IIpUserDefaultSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpUserDefaultSettings {
        data = typeof data === 'object' ? data : {};
        let result = new IpUserDefaultSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpUserDefaultSettings {
}

export class IpCrossCustomerStaffingContracts implements IIpCrossCustomerStaffingContracts {

    constructor(data?: IIpCrossCustomerStaffingContracts) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpCrossCustomerStaffingContracts {
        data = typeof data === 'object' ? data : {};
        let result = new IpCrossCustomerStaffingContracts();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpCrossCustomerStaffingContracts {
}

export class IpApiResourceOrganisationIdentifiers implements IIpApiResourceOrganisationIdentifiers {

    constructor(data?: IIpApiResourceOrganisationIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceOrganisationIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceOrganisationIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceOrganisationIdentifiers {
}

export class IpAttitudeSurveyConfigurations implements IIpAttitudeSurveyConfigurations {

    constructor(data?: IIpAttitudeSurveyConfigurations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpAttitudeSurveyConfigurations {
        data = typeof data === 'object' ? data : {};
        let result = new IpAttitudeSurveyConfigurations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpAttitudeSurveyConfigurations {
}

export class IpAttitudeSurveyOrganisationSubUnits implements IIpAttitudeSurveyOrganisationSubUnits {

    constructor(data?: IIpAttitudeSurveyOrganisationSubUnits) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpAttitudeSurveyOrganisationSubUnits {
        data = typeof data === 'object' ? data : {};
        let result = new IpAttitudeSurveyOrganisationSubUnits();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpAttitudeSurveyOrganisationSubUnits {
}

export class IpAttitudeSurveyOrganisationUnits implements IIpAttitudeSurveyOrganisationUnits {

    constructor(data?: IIpAttitudeSurveyOrganisationUnits) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpAttitudeSurveyOrganisationUnits {
        data = typeof data === 'object' ? data : {};
        let result = new IpAttitudeSurveyOrganisationUnits();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpAttitudeSurveyOrganisationUnits {
}

export class IpDeviceNotificationOrganisationConfigurations implements IIpDeviceNotificationOrganisationConfigurations {

    constructor(data?: IIpDeviceNotificationOrganisationConfigurations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpDeviceNotificationOrganisationConfigurations {
        data = typeof data === 'object' ? data : {};
        let result = new IpDeviceNotificationOrganisationConfigurations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpDeviceNotificationOrganisationConfigurations {
}

export class IpEmailOrganisationConfigurations implements IIpEmailOrganisationConfigurations {

    constructor(data?: IIpEmailOrganisationConfigurations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpEmailOrganisationConfigurations {
        data = typeof data === 'object' ? data : {};
        let result = new IpEmailOrganisationConfigurations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpEmailOrganisationConfigurations {
}

export class IpExternalSystemHrmConfigurations implements IIpExternalSystemHrmConfigurations {

    constructor(data?: IIpExternalSystemHrmConfigurations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemHrmConfigurations {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemHrmConfigurations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemHrmConfigurations {
}

export class IpExternalSystemEbemanningCustomerAssignments implements IIpExternalSystemEbemanningCustomerAssignments {

    constructor(data?: IIpExternalSystemEbemanningCustomerAssignments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemEbemanningCustomerAssignments {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemEbemanningCustomerAssignments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemEbemanningCustomerAssignments {
}

export class IpExternalSystemEbemanningConfigurations implements IIpExternalSystemEbemanningConfigurations {

    constructor(data?: IIpExternalSystemEbemanningConfigurations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemEbemanningConfigurations {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemEbemanningConfigurations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemEbemanningConfigurations {
}

export class IpExternalSystemTilTidConfigurations implements IIpExternalSystemTilTidConfigurations {

    constructor(data?: IIpExternalSystemTilTidConfigurations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTilTidConfigurations {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTilTidConfigurations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTilTidConfigurations {
}

export class IpExternalSystemOrganisationIdentifiers implements IIpExternalSystemOrganisationIdentifiers {

    constructor(data?: IIpExternalSystemOrganisationIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemOrganisationIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemOrganisationIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemOrganisationIdentifiers {
}

export class IpExternalSystemEbemanningApiAuthenticationKeys implements IIpExternalSystemEbemanningApiAuthenticationKeys {

    constructor(data?: IIpExternalSystemEbemanningApiAuthenticationKeys) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemEbemanningApiAuthenticationKeys {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemEbemanningApiAuthenticationKeys();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemEbemanningApiAuthenticationKeys {
}

export class IpImportExternalSystemDataDumpLogs implements IIpImportExternalSystemDataDumpLogs {

    constructor(data?: IIpImportExternalSystemDataDumpLogs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpImportExternalSystemDataDumpLogs {
        data = typeof data === 'object' ? data : {};
        let result = new IpImportExternalSystemDataDumpLogs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpImportExternalSystemDataDumpLogs {
}

export class IpOrganisationUnitAndSubUnitGroups implements IIpOrganisationUnitAndSubUnitGroups {

    constructor(data?: IIpOrganisationUnitAndSubUnitGroups) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpOrganisationUnitAndSubUnitGroups {
        data = typeof data === 'object' ? data : {};
        let result = new IpOrganisationUnitAndSubUnitGroups();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpOrganisationUnitAndSubUnitGroups {
}

export class IpScheduleAvailabilityConfigurations implements IIpScheduleAvailabilityConfigurations {

    constructor(data?: IIpScheduleAvailabilityConfigurations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpScheduleAvailabilityConfigurations {
        data = typeof data === 'object' ? data : {};
        let result = new IpScheduleAvailabilityConfigurations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpScheduleAvailabilityConfigurations {
}

export class IpTimeReportCustomerSettings implements IIpTimeReportCustomerSettings {

    constructor(data?: IIpTimeReportCustomerSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportCustomerSettings {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportCustomerSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportCustomerSettings {
}

export class IpTtApiAccounts implements IIpTtApiAccounts {

    constructor(data?: IIpTtApiAccounts) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTtApiAccounts {
        data = typeof data === 'object' ? data : {};
        let result = new IpTtApiAccounts();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTtApiAccounts {
}

export class IpTtApiLogs implements IIpTtApiLogs {

    constructor(data?: IIpTtApiLogs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTtApiLogs {
        data = typeof data === 'object' ? data : {};
        let result = new IpTtApiLogs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTtApiLogs {
}

export class IpSyncAccounts implements IIpSyncAccounts {

    constructor(data?: IIpSyncAccounts) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpSyncAccounts {
        data = typeof data === 'object' ? data : {};
        let result = new IpSyncAccounts();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpSyncAccounts {
}

export class IpConnectApiUsers implements IIpConnectApiUsers {

    constructor(data?: IIpConnectApiUsers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpConnectApiUsers {
        data = typeof data === 'object' ? data : {};
        let result = new IpConnectApiUsers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpConnectApiUsers {
}

export class IpExternalSystemCronaConfigurations implements IIpExternalSystemCronaConfigurations {

    constructor(data?: IIpExternalSystemCronaConfigurations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemCronaConfigurations {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemCronaConfigurations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemCronaConfigurations {
}

export class IpExternalSystemFortnoxConfigurations implements IIpExternalSystemFortnoxConfigurations {

    constructor(data?: IIpExternalSystemFortnoxConfigurations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemFortnoxConfigurations {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemFortnoxConfigurations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemFortnoxConfigurations {
}

export class IpLoginTypes implements IIpLoginTypes {

    constructor(data?: IIpLoginTypes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpLoginTypes {
        data = typeof data === 'object' ? data : {};
        let result = new IpLoginTypes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpLoginTypes {
}

export class IpExternalSystemAbsenceCategoryIdentifiers implements IIpExternalSystemAbsenceCategoryIdentifiers {

    constructor(data?: IIpExternalSystemAbsenceCategoryIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemAbsenceCategoryIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemAbsenceCategoryIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemAbsenceCategoryIdentifiers {
}

export class IpExternalSystemTimeReportAttestIdentifiers implements IIpExternalSystemTimeReportAttestIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportAttestIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportAttestIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportAttestIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportAttestIdentifiers {
}

export class IpExternalSystemTimeReportCategoryIdentifiers implements IIpExternalSystemTimeReportCategoryIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportCategoryIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportCategoryIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportCategoryIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportCategoryIdentifiers {
}

export class IpExternalSystemTimeReportInconvenientTimeDefinitionIdentifiers implements IIpExternalSystemTimeReportInconvenientTimeDefinitionIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportInconvenientTimeDefinitionIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportInconvenientTimeDefinitionIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportInconvenientTimeDefinitionIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportInconvenientTimeDefinitionIdentifiers {
}

export class IpExternalSystemTimeReportInconvenientTimeDefinitionTypeIdentifiers implements IIpExternalSystemTimeReportInconvenientTimeDefinitionTypeIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportInconvenientTimeDefinitionTypeIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportInconvenientTimeDefinitionTypeIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportInconvenientTimeDefinitionTypeIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportInconvenientTimeDefinitionTypeIdentifiers {
}

export class IpExternalSystemTimeReportIdentifiers implements IIpExternalSystemTimeReportIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportIdentifiers {
}

export class IpExternalSystemTimeReportScheduledShiftIdentifiers implements IIpExternalSystemTimeReportScheduledShiftIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportScheduledShiftIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportScheduledShiftIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportScheduledShiftIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportScheduledShiftIdentifiers {
}

export class IpExternalSystemTimeReportScheduledInconvenientTimeFragmentIdentifiers implements IIpExternalSystemTimeReportScheduledInconvenientTimeFragmentIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportScheduledInconvenientTimeFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportScheduledInconvenientTimeFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportScheduledInconvenientTimeFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportScheduledInconvenientTimeFragmentIdentifiers {
}

export class IpExternalSystemTimeReportApprovedShiftIdentifiers implements IIpExternalSystemTimeReportApprovedShiftIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportApprovedShiftIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportApprovedShiftIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportApprovedShiftIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportApprovedShiftIdentifiers {
}

export class IpExternalSystemTimeReportApprovedInconvenientTimeFragmentIdentifiers implements IIpExternalSystemTimeReportApprovedInconvenientTimeFragmentIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportApprovedInconvenientTimeFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportApprovedInconvenientTimeFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportApprovedInconvenientTimeFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportApprovedInconvenientTimeFragmentIdentifiers {
}

export class IpExternalSystemScheduleAvailabilityIdentifiers implements IIpExternalSystemScheduleAvailabilityIdentifiers {

    constructor(data?: IIpExternalSystemScheduleAvailabilityIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemScheduleAvailabilityIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemScheduleAvailabilityIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemScheduleAvailabilityIdentifiers {
}

export class IpExternalSystemScheduleUnavailabilityIdentifiers implements IIpExternalSystemScheduleUnavailabilityIdentifiers {

    constructor(data?: IIpExternalSystemScheduleUnavailabilityIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemScheduleUnavailabilityIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemScheduleUnavailabilityIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemScheduleUnavailabilityIdentifiers {
}

export class IpExternalSystemTimeReportRegisteredScheduledDeviationFragmentIdentifiers implements IIpExternalSystemTimeReportRegisteredScheduledDeviationFragmentIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportRegisteredScheduledDeviationFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportRegisteredScheduledDeviationFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportRegisteredScheduledDeviationFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportRegisteredScheduledDeviationFragmentIdentifiers {
}

export class IpExternalSystemScheduleShiftIdentifiers implements IIpExternalSystemScheduleShiftIdentifiers {

    constructor(data?: IIpExternalSystemScheduleShiftIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemScheduleShiftIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemScheduleShiftIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemScheduleShiftIdentifiers {
}

export class IpExternalSystemTemporaryEmploymentCertificateIdentifiers implements IIpExternalSystemTemporaryEmploymentCertificateIdentifiers {

    constructor(data?: IIpExternalSystemTemporaryEmploymentCertificateIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTemporaryEmploymentCertificateIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTemporaryEmploymentCertificateIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTemporaryEmploymentCertificateIdentifiers {
}

export class IpExternalSystemTimeReportRegisteredApprovedDeviationFragmentIdentifiers implements IIpExternalSystemTimeReportRegisteredApprovedDeviationFragmentIdentifiers {

    constructor(data?: IIpExternalSystemTimeReportRegisteredApprovedDeviationFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemTimeReportRegisteredApprovedDeviationFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemTimeReportRegisteredApprovedDeviationFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemTimeReportRegisteredApprovedDeviationFragmentIdentifiers {
}

export class IpExternalSystemScheduleShiftFragmentIdentifiers implements IIpExternalSystemScheduleShiftFragmentIdentifiers {

    constructor(data?: IIpExternalSystemScheduleShiftFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemScheduleShiftFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemScheduleShiftFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemScheduleShiftFragmentIdentifiers {
}

export class IpExternalSystemScheduleShiftAbsenceFragmentIdentifiers implements IIpExternalSystemScheduleShiftAbsenceFragmentIdentifiers {

    constructor(data?: IIpExternalSystemScheduleShiftAbsenceFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemScheduleShiftAbsenceFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemScheduleShiftAbsenceFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemScheduleShiftAbsenceFragmentIdentifiers {
}

export class IpExternalSystemScheduleShiftBreakFragmentIdentifiers implements IIpExternalSystemScheduleShiftBreakFragmentIdentifiers {

    constructor(data?: IIpExternalSystemScheduleShiftBreakFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemScheduleShiftBreakFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemScheduleShiftBreakFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemScheduleShiftBreakFragmentIdentifiers {
}

export class IpExternalSystemScheduleShiftAnnouncementIdentifiers implements IIpExternalSystemScheduleShiftAnnouncementIdentifiers {

    constructor(data?: IIpExternalSystemScheduleShiftAnnouncementIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalSystemScheduleShiftAnnouncementIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalSystemScheduleShiftAnnouncementIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalSystemScheduleShiftAnnouncementIdentifiers {
}

export class IpApiResourceTimeReportIdentifiers implements IIpApiResourceTimeReportIdentifiers {

    constructor(data?: IIpApiResourceTimeReportIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportIdentifiers {
}

export class IpTimeReportApprovedInconvenientTimeFragments implements IIpTimeReportApprovedInconvenientTimeFragments {

    constructor(data?: IIpTimeReportApprovedInconvenientTimeFragments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportApprovedInconvenientTimeFragments {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportApprovedInconvenientTimeFragments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportApprovedInconvenientTimeFragments {
}

export class IpTimeReportApprovedInconvenientTimes implements IIpTimeReportApprovedInconvenientTimes {

    constructor(data?: IIpTimeReportApprovedInconvenientTimes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportApprovedInconvenientTimes {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportApprovedInconvenientTimes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportApprovedInconvenientTimes {
}

export class IpTimeReportApprovedShifts implements IIpTimeReportApprovedShifts {

    constructor(data?: IIpTimeReportApprovedShifts) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportApprovedShifts {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportApprovedShifts();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportApprovedShifts {
}

export class IpTimeReportAttests implements IIpTimeReportAttests {

    constructor(data?: IIpTimeReportAttests) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportAttests {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportAttests();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportAttests {
}

export class IpTimeReportAttributes implements IIpTimeReportAttributes {

    constructor(data?: IIpTimeReportAttributes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportAttributes {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportAttributes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportAttributes {
}

export class IpTimeReportDeviationFragments implements IIpTimeReportDeviationFragments {

    constructor(data?: IIpTimeReportDeviationFragments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportDeviationFragments {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportDeviationFragments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportDeviationFragments {
}

export class IpTimeReportScheduledInconvenientTimes implements IIpTimeReportScheduledInconvenientTimes {

    constructor(data?: IIpTimeReportScheduledInconvenientTimes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportScheduledInconvenientTimes {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportScheduledInconvenientTimes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportScheduledInconvenientTimes {
}

export class IpTimeReportScheduledUnspecifiedGapFragments implements IIpTimeReportScheduledUnspecifiedGapFragments {

    constructor(data?: IIpTimeReportScheduledUnspecifiedGapFragments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportScheduledUnspecifiedGapFragments {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportScheduledUnspecifiedGapFragments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportScheduledUnspecifiedGapFragments {
}

export class IpTimeReportScheduledInconvenientTimeFragments implements IIpTimeReportScheduledInconvenientTimeFragments {

    constructor(data?: IIpTimeReportScheduledInconvenientTimeFragments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportScheduledInconvenientTimeFragments {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportScheduledInconvenientTimeFragments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportScheduledInconvenientTimeFragments {
}

export class IpTimeReportScheduledShifts implements IIpTimeReportScheduledShifts {

    constructor(data?: IIpTimeReportScheduledShifts) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportScheduledShifts {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportScheduledShifts();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportScheduledShifts {
}

export class IpApiResourceTimeReportCategoryIdentifiers implements IIpApiResourceTimeReportCategoryIdentifiers {

    constructor(data?: IIpApiResourceTimeReportCategoryIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportCategoryIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportCategoryIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportCategoryIdentifiers {
}

export class IpSchema implements IIpSchema {

    constructor(data?: IIpSchema) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpSchema {
        data = typeof data === 'object' ? data : {};
        let result = new IpSchema();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpSchema {
}

export class IpAttitudeSurveyPeriodPollQuestions implements IIpAttitudeSurveyPeriodPollQuestions {

    constructor(data?: IIpAttitudeSurveyPeriodPollQuestions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpAttitudeSurveyPeriodPollQuestions {
        data = typeof data === 'object' ? data : {};
        let result = new IpAttitudeSurveyPeriodPollQuestions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpAttitudeSurveyPeriodPollQuestions {
}

export class IpDeviceNotificationApplications implements IIpDeviceNotificationApplications {

    constructor(data?: IIpDeviceNotificationApplications) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpDeviceNotificationApplications {
        data = typeof data === 'object' ? data : {};
        let result = new IpDeviceNotificationApplications();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpDeviceNotificationApplications {
}

export class IpDeviceNotificationPlatforms implements IIpDeviceNotificationPlatforms {

    constructor(data?: IIpDeviceNotificationPlatforms) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpDeviceNotificationPlatforms {
        data = typeof data === 'object' ? data : {};
        let result = new IpDeviceNotificationPlatforms();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpDeviceNotificationPlatforms {
}

export class IpDeviceNotifications implements IIpDeviceNotifications {

    constructor(data?: IIpDeviceNotifications) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpDeviceNotifications {
        data = typeof data === 'object' ? data : {};
        let result = new IpDeviceNotifications();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpDeviceNotifications {
}

export class IpEmails implements IIpEmails {

    constructor(data?: IIpEmails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpEmails {
        data = typeof data === 'object' ? data : {};
        let result = new IpEmails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpEmails {
}

export class IpExternalCalendarRequestLogs implements IIpExternalCalendarRequestLogs {

    constructor(data?: IIpExternalCalendarRequestLogs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpExternalCalendarRequestLogs {
        data = typeof data === 'object' ? data : {};
        let result = new IpExternalCalendarRequestLogs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpExternalCalendarRequestLogs {
}

export class IpTimeReportInconvenientTimeDefinitions implements IIpTimeReportInconvenientTimeDefinitions {

    constructor(data?: IIpTimeReportInconvenientTimeDefinitions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportInconvenientTimeDefinitions {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportInconvenientTimeDefinitions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportInconvenientTimeDefinitions {
}

export class IpOrders implements IIpOrders {

    constructor(data?: IIpOrders) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpOrders {
        data = typeof data === 'object' ? data : {};
        let result = new IpOrders();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpOrders {
}

export class IpAttitudeSurveyPeriods implements IIpAttitudeSurveyPeriods {

    constructor(data?: IIpAttitudeSurveyPeriods) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpAttitudeSurveyPeriods {
        data = typeof data === 'object' ? data : {};
        let result = new IpAttitudeSurveyPeriods();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpAttitudeSurveyPeriods {
}

export class IpAttitudeSurveyPeriodPollQuestionShiftFragments implements IIpAttitudeSurveyPeriodPollQuestionShiftFragments {

    constructor(data?: IIpAttitudeSurveyPeriodPollQuestionShiftFragments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpAttitudeSurveyPeriodPollQuestionShiftFragments {
        data = typeof data === 'object' ? data : {};
        let result = new IpAttitudeSurveyPeriodPollQuestionShiftFragments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpAttitudeSurveyPeriodPollQuestionShiftFragments {
}

export class IpSyncPartners implements IIpSyncPartners {

    constructor(data?: IIpSyncPartners) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpSyncPartners {
        data = typeof data === 'object' ? data : {};
        let result = new IpSyncPartners();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpSyncPartners {
}

export class IpRoles implements IIpRoles {

    constructor(data?: IIpRoles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpRoles {
        data = typeof data === 'object' ? data : {};
        let result = new IpRoles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpRoles {
}

export class IpConnectApiAccessGroups implements IIpConnectApiAccessGroups {

    constructor(data?: IIpConnectApiAccessGroups) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpConnectApiAccessGroups {
        data = typeof data === 'object' ? data : {};
        let result = new IpConnectApiAccessGroups();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpConnectApiAccessGroups {
}

export class IpConnectApiSessions implements IIpConnectApiSessions {

    constructor(data?: IIpConnectApiSessions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpConnectApiSessions {
        data = typeof data === 'object' ? data : {};
        let result = new IpConnectApiSessions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpConnectApiSessions {
}

export class IpCodesForLeave implements IIpCodesForLeave {

    constructor(data?: IIpCodesForLeave) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpCodesForLeave {
        data = typeof data === 'object' ? data : {};
        let result = new IpCodesForLeave();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpCodesForLeave {
}

export class IpTimeReportInconvenientTimeDefinitionTypes implements IIpTimeReportInconvenientTimeDefinitionTypes {

    constructor(data?: IIpTimeReportInconvenientTimeDefinitionTypes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportInconvenientTimeDefinitionTypes {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportInconvenientTimeDefinitionTypes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportInconvenientTimeDefinitionTypes {
}

export class IpApiResourceTimeReportApprovedInconvenientTimeFragmentIdentifiers implements IIpApiResourceTimeReportApprovedInconvenientTimeFragmentIdentifiers {

    constructor(data?: IIpApiResourceTimeReportApprovedInconvenientTimeFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportApprovedInconvenientTimeFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportApprovedInconvenientTimeFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportApprovedInconvenientTimeFragmentIdentifiers {
}

export class IpTimeReportInconvenientTimeDefinitionGenericIntervals implements IIpTimeReportInconvenientTimeDefinitionGenericIntervals {

    constructor(data?: IIpTimeReportInconvenientTimeDefinitionGenericIntervals) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportInconvenientTimeDefinitionGenericIntervals {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportInconvenientTimeDefinitionGenericIntervals();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportInconvenientTimeDefinitionGenericIntervals {
}

export class IpTimeReportInconvenientTimeDefinitionSpecificIntervals implements IIpTimeReportInconvenientTimeDefinitionSpecificIntervals {

    constructor(data?: IIpTimeReportInconvenientTimeDefinitionSpecificIntervals) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpTimeReportInconvenientTimeDefinitionSpecificIntervals {
        data = typeof data === 'object' ? data : {};
        let result = new IpTimeReportInconvenientTimeDefinitionSpecificIntervals();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpTimeReportInconvenientTimeDefinitionSpecificIntervals {
}

export class IpApiResourceTimeReportApprovedShiftIdentifiers implements IIpApiResourceTimeReportApprovedShiftIdentifiers {

    constructor(data?: IIpApiResourceTimeReportApprovedShiftIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportApprovedShiftIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportApprovedShiftIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportApprovedShiftIdentifiers {
}

export class IpApiResourceTimeReportAttestIdentifiers implements IIpApiResourceTimeReportAttestIdentifiers {

    constructor(data?: IIpApiResourceTimeReportAttestIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportAttestIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportAttestIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportAttestIdentifiers {
}

export class IpApiResourceTimeReportRegisteredApprovedDeviationFragmentIdentifiers implements IIpApiResourceTimeReportRegisteredApprovedDeviationFragmentIdentifiers {

    constructor(data?: IIpApiResourceTimeReportRegisteredApprovedDeviationFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportRegisteredApprovedDeviationFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportRegisteredApprovedDeviationFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportRegisteredApprovedDeviationFragmentIdentifiers {
}

export class IpApiResourceTimeReportRegisteredScheduledDeviationFragmentIdentifiers implements IIpApiResourceTimeReportRegisteredScheduledDeviationFragmentIdentifiers {

    constructor(data?: IIpApiResourceTimeReportRegisteredScheduledDeviationFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportRegisteredScheduledDeviationFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportRegisteredScheduledDeviationFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportRegisteredScheduledDeviationFragmentIdentifiers {
}

export class IpApiResourceTimeReportScheduledInconvenientTimeFragmentIdentifiers implements IIpApiResourceTimeReportScheduledInconvenientTimeFragmentIdentifiers {

    constructor(data?: IIpApiResourceTimeReportScheduledInconvenientTimeFragmentIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportScheduledInconvenientTimeFragmentIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportScheduledInconvenientTimeFragmentIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportScheduledInconvenientTimeFragmentIdentifiers {
}

export class IpApiResourceTimeReportScheduledShiftIdentifiers implements IIpApiResourceTimeReportScheduledShiftIdentifiers {

    constructor(data?: IIpApiResourceTimeReportScheduledShiftIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportScheduledShiftIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportScheduledShiftIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportScheduledShiftIdentifiers {
}

export class IpApiResourceScheduleAvailabilityIdentifiers implements IIpApiResourceScheduleAvailabilityIdentifiers {

    constructor(data?: IIpApiResourceScheduleAvailabilityIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceScheduleAvailabilityIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceScheduleAvailabilityIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceScheduleAvailabilityIdentifiers {
}

export class IpApiResourceScheduleShiftIdentifiers implements IIpApiResourceScheduleShiftIdentifiers {

    constructor(data?: IIpApiResourceScheduleShiftIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceScheduleShiftIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceScheduleShiftIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceScheduleShiftIdentifiers {
}

export class IpApiResourceScheduleUnavailabilityIdentifiers implements IIpApiResourceScheduleUnavailabilityIdentifiers {

    constructor(data?: IIpApiResourceScheduleUnavailabilityIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceScheduleUnavailabilityIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceScheduleUnavailabilityIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceScheduleUnavailabilityIdentifiers {
}

export class IpAttitudeSurveyPeriodPolls implements IIpAttitudeSurveyPeriodPolls {

    constructor(data?: IIpAttitudeSurveyPeriodPolls) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpAttitudeSurveyPeriodPolls {
        data = typeof data === 'object' ? data : {};
        let result = new IpAttitudeSurveyPeriodPolls();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpAttitudeSurveyPeriodPolls {
}

export class IpAttitudeSurveyPeriodPollQuestionShifts implements IIpAttitudeSurveyPeriodPollQuestionShifts {

    constructor(data?: IIpAttitudeSurveyPeriodPollQuestionShifts) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpAttitudeSurveyPeriodPollQuestionShifts {
        data = typeof data === 'object' ? data : {};
        let result = new IpAttitudeSurveyPeriodPollQuestionShifts();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpAttitudeSurveyPeriodPollQuestionShifts {
}

export class IpAttitudeSurveyResponses implements IIpAttitudeSurveyResponses {

    constructor(data?: IIpAttitudeSurveyResponses) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpAttitudeSurveyResponses {
        data = typeof data === 'object' ? data : {};
        let result = new IpAttitudeSurveyResponses();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpAttitudeSurveyResponses {
}

export class IpDeviceNotificationMessages implements IIpDeviceNotificationMessages {

    constructor(data?: IIpDeviceNotificationMessages) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpDeviceNotificationMessages {
        data = typeof data === 'object' ? data : {};
        let result = new IpDeviceNotificationMessages();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpDeviceNotificationMessages {
}

export class IpEmailMessages implements IIpEmailMessages {

    constructor(data?: IIpEmailMessages) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpEmailMessages {
        data = typeof data === 'object' ? data : {};
        let result = new IpEmailMessages();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpEmailMessages {
}

export class IpApiResourceTimeReportInconvenientTimeDefinitionIdentifiers implements IIpApiResourceTimeReportInconvenientTimeDefinitionIdentifiers {

    constructor(data?: IIpApiResourceTimeReportInconvenientTimeDefinitionIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportInconvenientTimeDefinitionIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportInconvenientTimeDefinitionIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportInconvenientTimeDefinitionIdentifiers {
}

export class IpApiResourceScheduleShiftAnnouncementIdentifiers implements IIpApiResourceScheduleShiftAnnouncementIdentifiers {

    constructor(data?: IIpApiResourceScheduleShiftAnnouncementIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceScheduleShiftAnnouncementIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceScheduleShiftAnnouncementIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceScheduleShiftAnnouncementIdentifiers {
}

export class IpAttitudeSurveyPollIntervals implements IIpAttitudeSurveyPollIntervals {

    constructor(data?: IIpAttitudeSurveyPollIntervals) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpAttitudeSurveyPollIntervals {
        data = typeof data === 'object' ? data : {};
        let result = new IpAttitudeSurveyPollIntervals();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpAttitudeSurveyPollIntervals {
}

export class IpConnectApiEndpoints implements IIpConnectApiEndpoints {

    constructor(data?: IIpConnectApiEndpoints) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpConnectApiEndpoints {
        data = typeof data === 'object' ? data : {};
        let result = new IpConnectApiEndpoints();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpConnectApiEndpoints {
}

export class IpConnectApiErrorLogs implements IIpConnectApiErrorLogs {

    constructor(data?: IIpConnectApiErrorLogs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpConnectApiErrorLogs {
        data = typeof data === 'object' ? data : {};
        let result = new IpConnectApiErrorLogs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpConnectApiErrorLogs {
}

export class IpConnectApiRequestLogs implements IIpConnectApiRequestLogs {

    constructor(data?: IIpConnectApiRequestLogs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpConnectApiRequestLogs {
        data = typeof data === 'object' ? data : {};
        let result = new IpConnectApiRequestLogs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpConnectApiRequestLogs {
}

export class IpApiResourceAbsenceCategoryIdentifiers implements IIpApiResourceAbsenceCategoryIdentifiers {

    constructor(data?: IIpApiResourceAbsenceCategoryIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceAbsenceCategoryIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceAbsenceCategoryIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceAbsenceCategoryIdentifiers {
}

export class IpApiResourceTimeReportInconvenientTimeDefinitionTypeIdentifiers implements IIpApiResourceTimeReportInconvenientTimeDefinitionTypeIdentifiers {

    constructor(data?: IIpApiResourceTimeReportInconvenientTimeDefinitionTypeIdentifiers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpApiResourceTimeReportInconvenientTimeDefinitionTypeIdentifiers {
        data = typeof data === 'object' ? data : {};
        let result = new IpApiResourceTimeReportInconvenientTimeDefinitionTypeIdentifiers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpApiResourceTimeReportInconvenientTimeDefinitionTypeIdentifiers {
}

export class IpManualOrders implements IIpManualOrders {

    constructor(data?: IIpManualOrders) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpManualOrders {
        data = typeof data === 'object' ? data : {};
        let result = new IpManualOrders();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpManualOrders {
}

export class IpDeviceNotificationContexts implements IIpDeviceNotificationContexts {

    constructor(data?: IIpDeviceNotificationContexts) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpDeviceNotificationContexts {
        data = typeof data === 'object' ? data : {};
        let result = new IpDeviceNotificationContexts();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpDeviceNotificationContexts {
}

export class IpDeviceNotificationMessageTranslations implements IIpDeviceNotificationMessageTranslations {

    constructor(data?: IIpDeviceNotificationMessageTranslations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpDeviceNotificationMessageTranslations {
        data = typeof data === 'object' ? data : {};
        let result = new IpDeviceNotificationMessageTranslations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpDeviceNotificationMessageTranslations {
}

export class IpEmailContexts implements IIpEmailContexts {

    constructor(data?: IIpEmailContexts) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpEmailContexts {
        data = typeof data === 'object' ? data : {};
        let result = new IpEmailContexts();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpEmailContexts {
}

export class IpEmailMessageTranslations implements IIpEmailMessageTranslations {

    constructor(data?: IIpEmailMessageTranslations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IpEmailMessageTranslations {
        data = typeof data === 'object' ? data : {};
        let result = new IpEmailMessageTranslations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIpEmailMessageTranslations {
}

export class OfficeNotification implements IOfficeNotification {

    constructor(data?: IOfficeNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): OfficeNotification {
        data = typeof data === 'object' ? data : {};
        let result = new OfficeNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IOfficeNotification {
}

export class MyOfficeNotifications implements IMyOfficeNotifications {

    constructor(data?: IMyOfficeNotifications) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): MyOfficeNotifications {
        data = typeof data === 'object' ? data : {};
        let result = new MyOfficeNotifications();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IMyOfficeNotifications {
}

export class Parameter implements IParameter {

    constructor(data?: IParameter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Parameter {
        data = typeof data === 'object' ? data : {};
        let result = new Parameter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IParameter {
}

export class QAPerformance implements IQAPerformance {
    identifier?: string | undefined;
    location?: string | undefined;
    intervalStart?: Date | undefined;
    intervalEnd?: Date | undefined;

    constructor(data?: IQAPerformance) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.identifier = _data["Identifier"];
            this.location = _data["Location"];
            this.intervalStart = _data["IntervalStart"] ? new Date(_data["IntervalStart"].toString()) : <any>undefined;
            this.intervalEnd = _data["IntervalEnd"] ? new Date(_data["IntervalEnd"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): QAPerformance {
        data = typeof data === 'object' ? data : {};
        let result = new QAPerformance();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Identifier"] = this.identifier;
        data["Location"] = this.location;
        data["IntervalStart"] = this.intervalStart ? this.intervalStart.toISOString() : <any>undefined;
        data["IntervalEnd"] = this.intervalEnd ? this.intervalEnd.toISOString() : <any>undefined;
        return data;
    }
}

export interface IQAPerformance {
    identifier?: string | undefined;
    location?: string | undefined;
    intervalStart?: Date | undefined;
    intervalEnd?: Date | undefined;
}

export class SwapPostModel implements ISwapPostModel {
    swapId?: string | undefined;
    ids?: string[] | undefined;
    reason?: string | undefined;

    constructor(data?: ISwapPostModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.swapId = _data["SwapId"];
            if (Array.isArray(_data["Ids"])) {
                this.ids = [] as any;
                for (let item of _data["Ids"])
                    this.ids!.push(item);
            }
            this.reason = _data["Reason"];
        }
    }

    static fromJS(data: any): SwapPostModel {
        data = typeof data === 'object' ? data : {};
        let result = new SwapPostModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SwapId"] = this.swapId;
        if (Array.isArray(this.ids)) {
            data["Ids"] = [];
            for (let item of this.ids)
                data["Ids"].push(item);
        }
        data["Reason"] = this.reason;
        return data;
    }
}

export interface ISwapPostModel {
    swapId?: string | undefined;
    ids?: string[] | undefined;
    reason?: string | undefined;
}

export class ServiceResult implements IServiceResult {

    constructor(data?: IServiceResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ServiceResult {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IServiceResult {
}

export class ServicePostModel implements IServicePostModel {
    ids?: string[] | undefined;

    constructor(data?: IServicePostModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["Ids"])) {
                this.ids = [] as any;
                for (let item of _data["Ids"])
                    this.ids!.push(item);
            }
        }
    }

    static fromJS(data: any): ServicePostModel {
        data = typeof data === 'object' ? data : {};
        let result = new ServicePostModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["Ids"] = [];
            for (let item of this.ids)
                data["Ids"].push(item);
        }
        return data;
    }
}

export interface IServicePostModel {
    ids?: string[] | undefined;
}

export class PostAvailable implements IPostAvailable {

    constructor(data?: IPostAvailable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): PostAvailable {
        data = typeof data === 'object' ? data : {};
        let result = new PostAvailable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IPostAvailable {
}

export class PostAvailableV2 implements IPostAvailableV2 {

    constructor(data?: IPostAvailableV2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): PostAvailableV2 {
        data = typeof data === 'object' ? data : {};
        let result = new PostAvailableV2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IPostAvailableV2 {
}

export class AvailableDto implements IAvailableDto {

    constructor(data?: IAvailableDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AvailableDto {
        data = typeof data === 'object' ? data : {};
        let result = new AvailableDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAvailableDto {
}

export class Employment implements IEmployment {

    constructor(data?: IEmployment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Employment {
        data = typeof data === 'object' ? data : {};
        let result = new Employment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IEmployment {
}

export class PostVacation implements IPostVacation {

    constructor(data?: IPostVacation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): PostVacation {
        data = typeof data === 'object' ? data : {};
        let result = new PostVacation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IPostVacation {
}

export class Device implements IDevice {

    constructor(data?: IDevice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Device {
        data = typeof data === 'object' ? data : {};
        let result = new Device();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDevice {
}

export class Swap implements ISwap {

    constructor(data?: ISwap) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Swap {
        data = typeof data === 'object' ? data : {};
        let result = new Swap();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ISwap {
}

export class SwapOffer implements ISwapOffer {

    constructor(data?: ISwapOffer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): SwapOffer {
        data = typeof data === 'object' ? data : {};
        let result = new SwapOffer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ISwapOffer {
}

export class EmployeeSwap implements IEmployeeSwap {

    constructor(data?: IEmployeeSwap) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EmployeeSwap {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeSwap();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IEmployeeSwap {
}

export class Shift implements IShift {

    constructor(data?: IShift) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Shift {
        data = typeof data === 'object' ? data : {};
        let result = new Shift();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IShift {
}

export class Cost implements ICost {

    constructor(data?: ICost) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Cost {
        data = typeof data === 'object' ? data : {};
        let result = new Cost();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ICost {
}

export class ShiftFrag implements IShiftFrag {

    constructor(data?: IShiftFrag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ShiftFrag {
        data = typeof data === 'object' ? data : {};
        let result = new ShiftFrag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IShiftFrag {
}

export class ShiftRegisterEmployeeMealDeductionPostRequest implements IShiftRegisterEmployeeMealDeductionPostRequest {
    employeeMealDeduction?: boolean | undefined;

    constructor(data?: IShiftRegisterEmployeeMealDeductionPostRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employeeMealDeduction = _data["EmployeeMealDeduction"];
        }
    }

    static fromJS(data: any): ShiftRegisterEmployeeMealDeductionPostRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ShiftRegisterEmployeeMealDeductionPostRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EmployeeMealDeduction"] = this.employeeMealDeduction;
        return data;
    }
}

export interface IShiftRegisterEmployeeMealDeductionPostRequest {
    employeeMealDeduction?: boolean | undefined;
}

export class AvailableV2 implements IAvailableV2 {

    constructor(data?: IAvailableV2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AvailableV2 {
        data = typeof data === 'object' ? data : {};
        let result = new AvailableV2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAvailableV2 {
}

export class Available implements IAvailable {

    constructor(data?: IAvailable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Available {
        data = typeof data === 'object' ? data : {};
        let result = new Available();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAvailable {
}

export class Navigation implements INavigation {

    constructor(data?: INavigation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Navigation {
        data = typeof data === 'object' ? data : {};
        let result = new Navigation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface INavigation {
}

export class Survey implements ISurvey {

    constructor(data?: ISurvey) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Survey {
        data = typeof data === 'object' ? data : {};
        let result = new Survey();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ISurvey {
}

export class SurveyQuestion implements ISurveyQuestion {

    constructor(data?: ISurveyQuestion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): SurveyQuestion {
        data = typeof data === 'object' ? data : {};
        let result = new SurveyQuestion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ISurveyQuestion {
}

export class TimeReportsGetRequest implements ITimeReportsGetRequest {
    startDate?: Date | undefined;
    endDate?: Date | undefined;

    constructor(data?: ITimeReportsGetRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startDate = _data["StartDate"] ? new Date(_data["StartDate"].toString()) : <any>undefined;
            this.endDate = _data["EndDate"] ? new Date(_data["EndDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TimeReportsGetRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportsGetRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["StartDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ITimeReportsGetRequest {
    startDate?: Date | undefined;
    endDate?: Date | undefined;
}

export class TimeReport implements ITimeReport {
    iD?: number | undefined;
    cID?: number | undefined;
    pID?: number | undefined;
    date?: Date | undefined;
    firstInUtc?: Date | undefined;
    readonly firstInLocal?: Date | undefined;
    lastOutUtc?: Date | undefined;
    readonly lastOutLocal?: Date | undefined;
    scheduledFirstInUtc?: Date | undefined;
    readonly scheduledFirstInLocal?: Date | undefined;
    scheduledLastOutUtc?: Date | undefined;
    readonly scheduledLastOutLocal?: Date | undefined;
    registeredFirstInUtc?: Date | undefined;
    readonly registeredFirstInLocal?: Date | undefined;
    registeredLastOutUtc?: Date | undefined;
    readonly registeredLastOutLocal?: Date | undefined;
    approvedFirstInUtc?: Date | undefined;
    readonly approvedFirstInLocal?: Date | undefined;
    approvedLastOutUtc?: Date | undefined;
    readonly approvedLastOutLocal?: Date | undefined;
    scheduledWorkTimeHours?: number | undefined;
    scheduledBreakTimeHours?: number | undefined;
    scheduledAbsenceTimeHours?: number | undefined;
    scheduledVacationAbsenceTimeHours?: number | undefined;
    scheduledSickLeaveAbsenceTimeHours?: number | undefined;
    registeredWorkTimeHours?: number | undefined;
    registeredBreakTimeHours?: number | undefined;
    approvedWorkTimeHours?: number | undefined;
    approvedBreakTimeHours?: number | undefined;
    approvedAbsenceTimeHours?: number | undefined;
    approvedVacationAbsenceTimeHours?: number | undefined;
    approvedSickLeaveAbsenceTimeHours?: number | undefined;
    approvedInconvenientTimeHours?: number | undefined;
    approvedOvertimeHours?: number | undefined;
    approvedExcessTimeHours?: number | undefined;
    deviationPositiveTimeHours?: number | undefined;
    deviationNegativeTimeHours?: number | undefined;
    deviationAbsoluteTimeHours?: number | undefined;
    deviationSumTimeHours?: number | undefined;
    employeeComment?: string | undefined;
    employeeCommentedUtc?: Date | undefined;
    readonly employeeCommentedLocal?: Date | undefined;
    readonly rejected?: boolean | undefined;
    attests?: TimeReportAttest[] | undefined;
    scheduledFragments?: TimeReportFragment[] | undefined;
    scheduledAbsenceFragments?: TimeReportAbsenceFragment[] | undefined;
    readonly scheduledVacationAbsenceFragments?: TimeReportAbsenceFragment[] | undefined;
    readonly scheduledSickLeaveAbsenceFragments?: TimeReportAbsenceFragment[] | undefined;
    scheduledInconvenientTimeFragments?: TimeReportInconvenientTimeFragment[] | undefined;
    scheduledAbsenceInconvenientTimeFragments?: TimeReportInconvenientTimeFragment[] | undefined;
    scheduledInconvenientTimes?: TimeReportInconvenientTime[] | undefined;
    approvedFragments?: TimeReportFragment[] | undefined;
    approvedAbsenceFragments?: TimeReportAbsenceFragment[] | undefined;
    readonly approvedVacationAbsenceFragments?: TimeReportAbsenceFragment[] | undefined;
    readonly approvedSickLeaveAbsenceFragments?: TimeReportAbsenceFragment[] | undefined;
    approvedInconvenientTimeFragments?: TimeReportInconvenientTimeFragment[] | undefined;
    approvedAbsenceInconvenientTimeFragments?: TimeReportInconvenientTimeFragment[] | undefined;
    approvedInconvenientTimes?: TimeReportInconvenientTime[] | undefined;
    registeredFragments?: TimeReportRegisteredFragment[] | undefined;
    registeredScheduledFragments?: TimeReportRegisteredScheduledFragment[] | undefined;
    registeredScheduledAbsenceFragments?: TimeReportRegisteredScheduledAbsenceFragment[] | undefined;
    deviationFragments?: TimeReportDeviationFragment[] | undefined;

    constructor(data?: ITimeReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.cID = _data["CID"];
            this.pID = _data["PID"];
            this.date = _data["Date"] ? new Date(_data["Date"].toString()) : <any>undefined;
            this.firstInUtc = _data["FirstInUtc"] ? new Date(_data["FirstInUtc"].toString()) : <any>undefined;
            (<any>this).firstInLocal = _data["FirstInLocal"] ? new Date(_data["FirstInLocal"].toString()) : <any>undefined;
            this.lastOutUtc = _data["LastOutUtc"] ? new Date(_data["LastOutUtc"].toString()) : <any>undefined;
            (<any>this).lastOutLocal = _data["LastOutLocal"] ? new Date(_data["LastOutLocal"].toString()) : <any>undefined;
            this.scheduledFirstInUtc = _data["ScheduledFirstInUtc"] ? new Date(_data["ScheduledFirstInUtc"].toString()) : <any>undefined;
            (<any>this).scheduledFirstInLocal = _data["ScheduledFirstInLocal"] ? new Date(_data["ScheduledFirstInLocal"].toString()) : <any>undefined;
            this.scheduledLastOutUtc = _data["ScheduledLastOutUtc"] ? new Date(_data["ScheduledLastOutUtc"].toString()) : <any>undefined;
            (<any>this).scheduledLastOutLocal = _data["ScheduledLastOutLocal"] ? new Date(_data["ScheduledLastOutLocal"].toString()) : <any>undefined;
            this.registeredFirstInUtc = _data["RegisteredFirstInUtc"] ? new Date(_data["RegisteredFirstInUtc"].toString()) : <any>undefined;
            (<any>this).registeredFirstInLocal = _data["RegisteredFirstInLocal"] ? new Date(_data["RegisteredFirstInLocal"].toString()) : <any>undefined;
            this.registeredLastOutUtc = _data["RegisteredLastOutUtc"] ? new Date(_data["RegisteredLastOutUtc"].toString()) : <any>undefined;
            (<any>this).registeredLastOutLocal = _data["RegisteredLastOutLocal"] ? new Date(_data["RegisteredLastOutLocal"].toString()) : <any>undefined;
            this.approvedFirstInUtc = _data["ApprovedFirstInUtc"] ? new Date(_data["ApprovedFirstInUtc"].toString()) : <any>undefined;
            (<any>this).approvedFirstInLocal = _data["ApprovedFirstInLocal"] ? new Date(_data["ApprovedFirstInLocal"].toString()) : <any>undefined;
            this.approvedLastOutUtc = _data["ApprovedLastOutUtc"] ? new Date(_data["ApprovedLastOutUtc"].toString()) : <any>undefined;
            (<any>this).approvedLastOutLocal = _data["ApprovedLastOutLocal"] ? new Date(_data["ApprovedLastOutLocal"].toString()) : <any>undefined;
            this.scheduledWorkTimeHours = _data["ScheduledWorkTimeHours"];
            this.scheduledBreakTimeHours = _data["ScheduledBreakTimeHours"];
            this.scheduledAbsenceTimeHours = _data["ScheduledAbsenceTimeHours"];
            this.scheduledVacationAbsenceTimeHours = _data["ScheduledVacationAbsenceTimeHours"];
            this.scheduledSickLeaveAbsenceTimeHours = _data["ScheduledSickLeaveAbsenceTimeHours"];
            this.registeredWorkTimeHours = _data["RegisteredWorkTimeHours"];
            this.registeredBreakTimeHours = _data["RegisteredBreakTimeHours"];
            this.approvedWorkTimeHours = _data["ApprovedWorkTimeHours"];
            this.approvedBreakTimeHours = _data["ApprovedBreakTimeHours"];
            this.approvedAbsenceTimeHours = _data["ApprovedAbsenceTimeHours"];
            this.approvedVacationAbsenceTimeHours = _data["ApprovedVacationAbsenceTimeHours"];
            this.approvedSickLeaveAbsenceTimeHours = _data["ApprovedSickLeaveAbsenceTimeHours"];
            this.approvedInconvenientTimeHours = _data["ApprovedInconvenientTimeHours"];
            this.approvedOvertimeHours = _data["ApprovedOvertimeHours"];
            this.approvedExcessTimeHours = _data["ApprovedExcessTimeHours"];
            this.deviationPositiveTimeHours = _data["DeviationPositiveTimeHours"];
            this.deviationNegativeTimeHours = _data["DeviationNegativeTimeHours"];
            this.deviationAbsoluteTimeHours = _data["DeviationAbsoluteTimeHours"];
            this.deviationSumTimeHours = _data["DeviationSumTimeHours"];
            this.employeeComment = _data["EmployeeComment"];
            this.employeeCommentedUtc = _data["EmployeeCommentedUtc"] ? new Date(_data["EmployeeCommentedUtc"].toString()) : <any>undefined;
            (<any>this).employeeCommentedLocal = _data["EmployeeCommentedLocal"] ? new Date(_data["EmployeeCommentedLocal"].toString()) : <any>undefined;
            (<any>this).rejected = _data["Rejected"];
            if (Array.isArray(_data["Attests"])) {
                this.attests = [] as any;
                for (let item of _data["Attests"])
                    this.attests!.push(TimeReportAttest.fromJS(item));
            }
            if (Array.isArray(_data["ScheduledFragments"])) {
                this.scheduledFragments = [] as any;
                for (let item of _data["ScheduledFragments"])
                    this.scheduledFragments!.push(TimeReportFragment.fromJS(item));
            }
            if (Array.isArray(_data["ScheduledAbsenceFragments"])) {
                this.scheduledAbsenceFragments = [] as any;
                for (let item of _data["ScheduledAbsenceFragments"])
                    this.scheduledAbsenceFragments!.push(TimeReportAbsenceFragment.fromJS(item));
            }
            if (Array.isArray(_data["ScheduledVacationAbsenceFragments"])) {
                (<any>this).scheduledVacationAbsenceFragments = [] as any;
                for (let item of _data["ScheduledVacationAbsenceFragments"])
                    (<any>this).scheduledVacationAbsenceFragments!.push(TimeReportAbsenceFragment.fromJS(item));
            }
            if (Array.isArray(_data["ScheduledSickLeaveAbsenceFragments"])) {
                (<any>this).scheduledSickLeaveAbsenceFragments = [] as any;
                for (let item of _data["ScheduledSickLeaveAbsenceFragments"])
                    (<any>this).scheduledSickLeaveAbsenceFragments!.push(TimeReportAbsenceFragment.fromJS(item));
            }
            if (Array.isArray(_data["ScheduledInconvenientTimeFragments"])) {
                this.scheduledInconvenientTimeFragments = [] as any;
                for (let item of _data["ScheduledInconvenientTimeFragments"])
                    this.scheduledInconvenientTimeFragments!.push(TimeReportInconvenientTimeFragment.fromJS(item));
            }
            if (Array.isArray(_data["ScheduledAbsenceInconvenientTimeFragments"])) {
                this.scheduledAbsenceInconvenientTimeFragments = [] as any;
                for (let item of _data["ScheduledAbsenceInconvenientTimeFragments"])
                    this.scheduledAbsenceInconvenientTimeFragments!.push(TimeReportInconvenientTimeFragment.fromJS(item));
            }
            if (Array.isArray(_data["ScheduledInconvenientTimes"])) {
                this.scheduledInconvenientTimes = [] as any;
                for (let item of _data["ScheduledInconvenientTimes"])
                    this.scheduledInconvenientTimes!.push(TimeReportInconvenientTime.fromJS(item));
            }
            if (Array.isArray(_data["ApprovedFragments"])) {
                this.approvedFragments = [] as any;
                for (let item of _data["ApprovedFragments"])
                    this.approvedFragments!.push(TimeReportFragment.fromJS(item));
            }
            if (Array.isArray(_data["ApprovedAbsenceFragments"])) {
                this.approvedAbsenceFragments = [] as any;
                for (let item of _data["ApprovedAbsenceFragments"])
                    this.approvedAbsenceFragments!.push(TimeReportAbsenceFragment.fromJS(item));
            }
            if (Array.isArray(_data["ApprovedVacationAbsenceFragments"])) {
                (<any>this).approvedVacationAbsenceFragments = [] as any;
                for (let item of _data["ApprovedVacationAbsenceFragments"])
                    (<any>this).approvedVacationAbsenceFragments!.push(TimeReportAbsenceFragment.fromJS(item));
            }
            if (Array.isArray(_data["ApprovedSickLeaveAbsenceFragments"])) {
                (<any>this).approvedSickLeaveAbsenceFragments = [] as any;
                for (let item of _data["ApprovedSickLeaveAbsenceFragments"])
                    (<any>this).approvedSickLeaveAbsenceFragments!.push(TimeReportAbsenceFragment.fromJS(item));
            }
            if (Array.isArray(_data["ApprovedInconvenientTimeFragments"])) {
                this.approvedInconvenientTimeFragments = [] as any;
                for (let item of _data["ApprovedInconvenientTimeFragments"])
                    this.approvedInconvenientTimeFragments!.push(TimeReportInconvenientTimeFragment.fromJS(item));
            }
            if (Array.isArray(_data["ApprovedAbsenceInconvenientTimeFragments"])) {
                this.approvedAbsenceInconvenientTimeFragments = [] as any;
                for (let item of _data["ApprovedAbsenceInconvenientTimeFragments"])
                    this.approvedAbsenceInconvenientTimeFragments!.push(TimeReportInconvenientTimeFragment.fromJS(item));
            }
            if (Array.isArray(_data["ApprovedInconvenientTimes"])) {
                this.approvedInconvenientTimes = [] as any;
                for (let item of _data["ApprovedInconvenientTimes"])
                    this.approvedInconvenientTimes!.push(TimeReportInconvenientTime.fromJS(item));
            }
            if (Array.isArray(_data["RegisteredFragments"])) {
                this.registeredFragments = [] as any;
                for (let item of _data["RegisteredFragments"])
                    this.registeredFragments!.push(TimeReportRegisteredFragment.fromJS(item));
            }
            if (Array.isArray(_data["RegisteredScheduledFragments"])) {
                this.registeredScheduledFragments = [] as any;
                for (let item of _data["RegisteredScheduledFragments"])
                    this.registeredScheduledFragments!.push(TimeReportRegisteredScheduledFragment.fromJS(item));
            }
            if (Array.isArray(_data["RegisteredScheduledAbsenceFragments"])) {
                this.registeredScheduledAbsenceFragments = [] as any;
                for (let item of _data["RegisteredScheduledAbsenceFragments"])
                    this.registeredScheduledAbsenceFragments!.push(TimeReportRegisteredScheduledAbsenceFragment.fromJS(item));
            }
            if (Array.isArray(_data["DeviationFragments"])) {
                this.deviationFragments = [] as any;
                for (let item of _data["DeviationFragments"])
                    this.deviationFragments!.push(TimeReportDeviationFragment.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TimeReport {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["CID"] = this.cID;
        data["PID"] = this.pID;
        data["Date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["FirstInUtc"] = this.firstInUtc ? this.firstInUtc.toISOString() : <any>undefined;
        data["FirstInLocal"] = this.firstInLocal ? this.firstInLocal.toISOString() : <any>undefined;
        data["LastOutUtc"] = this.lastOutUtc ? this.lastOutUtc.toISOString() : <any>undefined;
        data["LastOutLocal"] = this.lastOutLocal ? this.lastOutLocal.toISOString() : <any>undefined;
        data["ScheduledFirstInUtc"] = this.scheduledFirstInUtc ? this.scheduledFirstInUtc.toISOString() : <any>undefined;
        data["ScheduledFirstInLocal"] = this.scheduledFirstInLocal ? this.scheduledFirstInLocal.toISOString() : <any>undefined;
        data["ScheduledLastOutUtc"] = this.scheduledLastOutUtc ? this.scheduledLastOutUtc.toISOString() : <any>undefined;
        data["ScheduledLastOutLocal"] = this.scheduledLastOutLocal ? this.scheduledLastOutLocal.toISOString() : <any>undefined;
        data["RegisteredFirstInUtc"] = this.registeredFirstInUtc ? this.registeredFirstInUtc.toISOString() : <any>undefined;
        data["RegisteredFirstInLocal"] = this.registeredFirstInLocal ? this.registeredFirstInLocal.toISOString() : <any>undefined;
        data["RegisteredLastOutUtc"] = this.registeredLastOutUtc ? this.registeredLastOutUtc.toISOString() : <any>undefined;
        data["RegisteredLastOutLocal"] = this.registeredLastOutLocal ? this.registeredLastOutLocal.toISOString() : <any>undefined;
        data["ApprovedFirstInUtc"] = this.approvedFirstInUtc ? this.approvedFirstInUtc.toISOString() : <any>undefined;
        data["ApprovedFirstInLocal"] = this.approvedFirstInLocal ? this.approvedFirstInLocal.toISOString() : <any>undefined;
        data["ApprovedLastOutUtc"] = this.approvedLastOutUtc ? this.approvedLastOutUtc.toISOString() : <any>undefined;
        data["ApprovedLastOutLocal"] = this.approvedLastOutLocal ? this.approvedLastOutLocal.toISOString() : <any>undefined;
        data["ScheduledWorkTimeHours"] = this.scheduledWorkTimeHours;
        data["ScheduledBreakTimeHours"] = this.scheduledBreakTimeHours;
        data["ScheduledAbsenceTimeHours"] = this.scheduledAbsenceTimeHours;
        data["ScheduledVacationAbsenceTimeHours"] = this.scheduledVacationAbsenceTimeHours;
        data["ScheduledSickLeaveAbsenceTimeHours"] = this.scheduledSickLeaveAbsenceTimeHours;
        data["RegisteredWorkTimeHours"] = this.registeredWorkTimeHours;
        data["RegisteredBreakTimeHours"] = this.registeredBreakTimeHours;
        data["ApprovedWorkTimeHours"] = this.approvedWorkTimeHours;
        data["ApprovedBreakTimeHours"] = this.approvedBreakTimeHours;
        data["ApprovedAbsenceTimeHours"] = this.approvedAbsenceTimeHours;
        data["ApprovedVacationAbsenceTimeHours"] = this.approvedVacationAbsenceTimeHours;
        data["ApprovedSickLeaveAbsenceTimeHours"] = this.approvedSickLeaveAbsenceTimeHours;
        data["ApprovedInconvenientTimeHours"] = this.approvedInconvenientTimeHours;
        data["ApprovedOvertimeHours"] = this.approvedOvertimeHours;
        data["ApprovedExcessTimeHours"] = this.approvedExcessTimeHours;
        data["DeviationPositiveTimeHours"] = this.deviationPositiveTimeHours;
        data["DeviationNegativeTimeHours"] = this.deviationNegativeTimeHours;
        data["DeviationAbsoluteTimeHours"] = this.deviationAbsoluteTimeHours;
        data["DeviationSumTimeHours"] = this.deviationSumTimeHours;
        data["EmployeeComment"] = this.employeeComment;
        data["EmployeeCommentedUtc"] = this.employeeCommentedUtc ? this.employeeCommentedUtc.toISOString() : <any>undefined;
        data["EmployeeCommentedLocal"] = this.employeeCommentedLocal ? this.employeeCommentedLocal.toISOString() : <any>undefined;
        data["Rejected"] = this.rejected;
        if (Array.isArray(this.attests)) {
            data["Attests"] = [];
            for (let item of this.attests)
                data["Attests"].push(item.toJSON());
        }
        if (Array.isArray(this.scheduledFragments)) {
            data["ScheduledFragments"] = [];
            for (let item of this.scheduledFragments)
                data["ScheduledFragments"].push(item.toJSON());
        }
        if (Array.isArray(this.scheduledAbsenceFragments)) {
            data["ScheduledAbsenceFragments"] = [];
            for (let item of this.scheduledAbsenceFragments)
                data["ScheduledAbsenceFragments"].push(item.toJSON());
        }
        if (Array.isArray(this.scheduledVacationAbsenceFragments)) {
            data["ScheduledVacationAbsenceFragments"] = [];
            for (let item of this.scheduledVacationAbsenceFragments)
                data["ScheduledVacationAbsenceFragments"].push(item.toJSON());
        }
        if (Array.isArray(this.scheduledSickLeaveAbsenceFragments)) {
            data["ScheduledSickLeaveAbsenceFragments"] = [];
            for (let item of this.scheduledSickLeaveAbsenceFragments)
                data["ScheduledSickLeaveAbsenceFragments"].push(item.toJSON());
        }
        if (Array.isArray(this.scheduledInconvenientTimeFragments)) {
            data["ScheduledInconvenientTimeFragments"] = [];
            for (let item of this.scheduledInconvenientTimeFragments)
                data["ScheduledInconvenientTimeFragments"].push(item.toJSON());
        }
        if (Array.isArray(this.scheduledAbsenceInconvenientTimeFragments)) {
            data["ScheduledAbsenceInconvenientTimeFragments"] = [];
            for (let item of this.scheduledAbsenceInconvenientTimeFragments)
                data["ScheduledAbsenceInconvenientTimeFragments"].push(item.toJSON());
        }
        if (Array.isArray(this.scheduledInconvenientTimes)) {
            data["ScheduledInconvenientTimes"] = [];
            for (let item of this.scheduledInconvenientTimes)
                data["ScheduledInconvenientTimes"].push(item.toJSON());
        }
        if (Array.isArray(this.approvedFragments)) {
            data["ApprovedFragments"] = [];
            for (let item of this.approvedFragments)
                data["ApprovedFragments"].push(item.toJSON());
        }
        if (Array.isArray(this.approvedAbsenceFragments)) {
            data["ApprovedAbsenceFragments"] = [];
            for (let item of this.approvedAbsenceFragments)
                data["ApprovedAbsenceFragments"].push(item.toJSON());
        }
        if (Array.isArray(this.approvedVacationAbsenceFragments)) {
            data["ApprovedVacationAbsenceFragments"] = [];
            for (let item of this.approvedVacationAbsenceFragments)
                data["ApprovedVacationAbsenceFragments"].push(item.toJSON());
        }
        if (Array.isArray(this.approvedSickLeaveAbsenceFragments)) {
            data["ApprovedSickLeaveAbsenceFragments"] = [];
            for (let item of this.approvedSickLeaveAbsenceFragments)
                data["ApprovedSickLeaveAbsenceFragments"].push(item.toJSON());
        }
        if (Array.isArray(this.approvedInconvenientTimeFragments)) {
            data["ApprovedInconvenientTimeFragments"] = [];
            for (let item of this.approvedInconvenientTimeFragments)
                data["ApprovedInconvenientTimeFragments"].push(item.toJSON());
        }
        if (Array.isArray(this.approvedAbsenceInconvenientTimeFragments)) {
            data["ApprovedAbsenceInconvenientTimeFragments"] = [];
            for (let item of this.approvedAbsenceInconvenientTimeFragments)
                data["ApprovedAbsenceInconvenientTimeFragments"].push(item.toJSON());
        }
        if (Array.isArray(this.approvedInconvenientTimes)) {
            data["ApprovedInconvenientTimes"] = [];
            for (let item of this.approvedInconvenientTimes)
                data["ApprovedInconvenientTimes"].push(item.toJSON());
        }
        if (Array.isArray(this.registeredFragments)) {
            data["RegisteredFragments"] = [];
            for (let item of this.registeredFragments)
                data["RegisteredFragments"].push(item.toJSON());
        }
        if (Array.isArray(this.registeredScheduledFragments)) {
            data["RegisteredScheduledFragments"] = [];
            for (let item of this.registeredScheduledFragments)
                data["RegisteredScheduledFragments"].push(item.toJSON());
        }
        if (Array.isArray(this.registeredScheduledAbsenceFragments)) {
            data["RegisteredScheduledAbsenceFragments"] = [];
            for (let item of this.registeredScheduledAbsenceFragments)
                data["RegisteredScheduledAbsenceFragments"].push(item.toJSON());
        }
        if (Array.isArray(this.deviationFragments)) {
            data["DeviationFragments"] = [];
            for (let item of this.deviationFragments)
                data["DeviationFragments"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITimeReport {
    iD?: number | undefined;
    cID?: number | undefined;
    pID?: number | undefined;
    date?: Date | undefined;
    firstInUtc?: Date | undefined;
    firstInLocal?: Date | undefined;
    lastOutUtc?: Date | undefined;
    lastOutLocal?: Date | undefined;
    scheduledFirstInUtc?: Date | undefined;
    scheduledFirstInLocal?: Date | undefined;
    scheduledLastOutUtc?: Date | undefined;
    scheduledLastOutLocal?: Date | undefined;
    registeredFirstInUtc?: Date | undefined;
    registeredFirstInLocal?: Date | undefined;
    registeredLastOutUtc?: Date | undefined;
    registeredLastOutLocal?: Date | undefined;
    approvedFirstInUtc?: Date | undefined;
    approvedFirstInLocal?: Date | undefined;
    approvedLastOutUtc?: Date | undefined;
    approvedLastOutLocal?: Date | undefined;
    scheduledWorkTimeHours?: number | undefined;
    scheduledBreakTimeHours?: number | undefined;
    scheduledAbsenceTimeHours?: number | undefined;
    scheduledVacationAbsenceTimeHours?: number | undefined;
    scheduledSickLeaveAbsenceTimeHours?: number | undefined;
    registeredWorkTimeHours?: number | undefined;
    registeredBreakTimeHours?: number | undefined;
    approvedWorkTimeHours?: number | undefined;
    approvedBreakTimeHours?: number | undefined;
    approvedAbsenceTimeHours?: number | undefined;
    approvedVacationAbsenceTimeHours?: number | undefined;
    approvedSickLeaveAbsenceTimeHours?: number | undefined;
    approvedInconvenientTimeHours?: number | undefined;
    approvedOvertimeHours?: number | undefined;
    approvedExcessTimeHours?: number | undefined;
    deviationPositiveTimeHours?: number | undefined;
    deviationNegativeTimeHours?: number | undefined;
    deviationAbsoluteTimeHours?: number | undefined;
    deviationSumTimeHours?: number | undefined;
    employeeComment?: string | undefined;
    employeeCommentedUtc?: Date | undefined;
    employeeCommentedLocal?: Date | undefined;
    rejected?: boolean | undefined;
    attests?: TimeReportAttest[] | undefined;
    scheduledFragments?: TimeReportFragment[] | undefined;
    scheduledAbsenceFragments?: TimeReportAbsenceFragment[] | undefined;
    scheduledVacationAbsenceFragments?: TimeReportAbsenceFragment[] | undefined;
    scheduledSickLeaveAbsenceFragments?: TimeReportAbsenceFragment[] | undefined;
    scheduledInconvenientTimeFragments?: TimeReportInconvenientTimeFragment[] | undefined;
    scheduledAbsenceInconvenientTimeFragments?: TimeReportInconvenientTimeFragment[] | undefined;
    scheduledInconvenientTimes?: TimeReportInconvenientTime[] | undefined;
    approvedFragments?: TimeReportFragment[] | undefined;
    approvedAbsenceFragments?: TimeReportAbsenceFragment[] | undefined;
    approvedVacationAbsenceFragments?: TimeReportAbsenceFragment[] | undefined;
    approvedSickLeaveAbsenceFragments?: TimeReportAbsenceFragment[] | undefined;
    approvedInconvenientTimeFragments?: TimeReportInconvenientTimeFragment[] | undefined;
    approvedAbsenceInconvenientTimeFragments?: TimeReportInconvenientTimeFragment[] | undefined;
    approvedInconvenientTimes?: TimeReportInconvenientTime[] | undefined;
    registeredFragments?: TimeReportRegisteredFragment[] | undefined;
    registeredScheduledFragments?: TimeReportRegisteredScheduledFragment[] | undefined;
    registeredScheduledAbsenceFragments?: TimeReportRegisteredScheduledAbsenceFragment[] | undefined;
    deviationFragments?: TimeReportDeviationFragment[] | undefined;
}

export class TimeReportAttest implements ITimeReportAttest {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    attestingPID?: number | undefined;
    level?: number | undefined;
    description?: string | undefined;

    constructor(data?: ITimeReportAttest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.timeReportID = _data["TimeReportID"];
            this.attestingPID = _data["AttestingPID"];
            this.level = _data["Level"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): TimeReportAttest {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportAttest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["TimeReportID"] = this.timeReportID;
        data["AttestingPID"] = this.attestingPID;
        data["Level"] = this.level;
        data["Description"] = this.description;
        return data;
    }
}

export interface ITimeReportAttest {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    attestingPID?: number | undefined;
    level?: number | undefined;
    description?: string | undefined;
}

export class TimeReportFragment implements ITimeReportFragment {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    inUtc?: Date | undefined;
    readonly inLocal?: Date | undefined;
    outUtc?: Date | undefined;
    readonly outLocal?: Date | undefined;
    durationHours?: number | undefined;
    durationExcludingBreakHours?: number | undefined;
    organisationUnitCategoryID?: number | undefined;
    costAccountCategoryID?: number | undefined;
    categoryID?: number | undefined;

    constructor(data?: ITimeReportFragment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.timeReportID = _data["TimeReportID"];
            this.inUtc = _data["InUtc"] ? new Date(_data["InUtc"].toString()) : <any>undefined;
            (<any>this).inLocal = _data["InLocal"] ? new Date(_data["InLocal"].toString()) : <any>undefined;
            this.outUtc = _data["OutUtc"] ? new Date(_data["OutUtc"].toString()) : <any>undefined;
            (<any>this).outLocal = _data["OutLocal"] ? new Date(_data["OutLocal"].toString()) : <any>undefined;
            this.durationHours = _data["DurationHours"];
            this.durationExcludingBreakHours = _data["DurationExcludingBreakHours"];
            this.organisationUnitCategoryID = _data["OrganisationUnitCategoryID"];
            this.costAccountCategoryID = _data["CostAccountCategoryID"];
            this.categoryID = _data["CategoryID"];
        }
    }

    static fromJS(data: any): TimeReportFragment {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportFragment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["TimeReportID"] = this.timeReportID;
        data["InUtc"] = this.inUtc ? this.inUtc.toISOString() : <any>undefined;
        data["InLocal"] = this.inLocal ? this.inLocal.toISOString() : <any>undefined;
        data["OutUtc"] = this.outUtc ? this.outUtc.toISOString() : <any>undefined;
        data["OutLocal"] = this.outLocal ? this.outLocal.toISOString() : <any>undefined;
        data["DurationHours"] = this.durationHours;
        data["DurationExcludingBreakHours"] = this.durationExcludingBreakHours;
        data["OrganisationUnitCategoryID"] = this.organisationUnitCategoryID;
        data["CostAccountCategoryID"] = this.costAccountCategoryID;
        data["CategoryID"] = this.categoryID;
        return data;
    }
}

export interface ITimeReportFragment {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    inUtc?: Date | undefined;
    inLocal?: Date | undefined;
    outUtc?: Date | undefined;
    outLocal?: Date | undefined;
    durationHours?: number | undefined;
    durationExcludingBreakHours?: number | undefined;
    organisationUnitCategoryID?: number | undefined;
    costAccountCategoryID?: number | undefined;
    categoryID?: number | undefined;
}

export class TimeReportAbsenceFragment implements ITimeReportAbsenceFragment {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    inUtc?: Date | undefined;
    readonly inLocal?: Date | undefined;
    outUtc?: Date | undefined;
    readonly outLocal?: Date | undefined;
    durationHours?: number | undefined;
    durationExcludingBreakHours?: number | undefined;
    exemption?: boolean | undefined;
    sickLeave?: boolean | undefined;
    leaveID?: number | undefined;
    leaveExtCode?: string | undefined;
    organisationUnitCategoryID?: number | undefined;
    categoryID?: number | undefined;

    constructor(data?: ITimeReportAbsenceFragment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.timeReportID = _data["TimeReportID"];
            this.inUtc = _data["InUtc"] ? new Date(_data["InUtc"].toString()) : <any>undefined;
            (<any>this).inLocal = _data["InLocal"] ? new Date(_data["InLocal"].toString()) : <any>undefined;
            this.outUtc = _data["OutUtc"] ? new Date(_data["OutUtc"].toString()) : <any>undefined;
            (<any>this).outLocal = _data["OutLocal"] ? new Date(_data["OutLocal"].toString()) : <any>undefined;
            this.durationHours = _data["DurationHours"];
            this.durationExcludingBreakHours = _data["DurationExcludingBreakHours"];
            this.exemption = _data["Exemption"];
            this.sickLeave = _data["SickLeave"];
            this.leaveID = _data["LeaveID"];
            this.leaveExtCode = _data["LeaveExtCode"];
            this.organisationUnitCategoryID = _data["OrganisationUnitCategoryID"];
            this.categoryID = _data["CategoryID"];
        }
    }

    static fromJS(data: any): TimeReportAbsenceFragment {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportAbsenceFragment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["TimeReportID"] = this.timeReportID;
        data["InUtc"] = this.inUtc ? this.inUtc.toISOString() : <any>undefined;
        data["InLocal"] = this.inLocal ? this.inLocal.toISOString() : <any>undefined;
        data["OutUtc"] = this.outUtc ? this.outUtc.toISOString() : <any>undefined;
        data["OutLocal"] = this.outLocal ? this.outLocal.toISOString() : <any>undefined;
        data["DurationHours"] = this.durationHours;
        data["DurationExcludingBreakHours"] = this.durationExcludingBreakHours;
        data["Exemption"] = this.exemption;
        data["SickLeave"] = this.sickLeave;
        data["LeaveID"] = this.leaveID;
        data["LeaveExtCode"] = this.leaveExtCode;
        data["OrganisationUnitCategoryID"] = this.organisationUnitCategoryID;
        data["CategoryID"] = this.categoryID;
        return data;
    }
}

export interface ITimeReportAbsenceFragment {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    inUtc?: Date | undefined;
    inLocal?: Date | undefined;
    outUtc?: Date | undefined;
    outLocal?: Date | undefined;
    durationHours?: number | undefined;
    durationExcludingBreakHours?: number | undefined;
    exemption?: boolean | undefined;
    sickLeave?: boolean | undefined;
    leaveID?: number | undefined;
    leaveExtCode?: string | undefined;
    organisationUnitCategoryID?: number | undefined;
    categoryID?: number | undefined;
}

export class TimeReportInconvenientTimeFragment implements ITimeReportInconvenientTimeFragment {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    definitionName?: string | undefined;
    typeID?: number | undefined;
    typeName?: string | undefined;
    typePriority?: number | undefined;
    inUtc?: Date | undefined;
    readonly inLocal?: Date | undefined;
    outUtc?: Date | undefined;
    readonly outLocal?: Date | undefined;
    durationHours?: number | undefined;
    durationExcludingBreakHours?: number | undefined;

    constructor(data?: ITimeReportInconvenientTimeFragment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.timeReportID = _data["TimeReportID"];
            this.definitionName = _data["DefinitionName"];
            this.typeID = _data["TypeID"];
            this.typeName = _data["TypeName"];
            this.typePriority = _data["TypePriority"];
            this.inUtc = _data["InUtc"] ? new Date(_data["InUtc"].toString()) : <any>undefined;
            (<any>this).inLocal = _data["InLocal"] ? new Date(_data["InLocal"].toString()) : <any>undefined;
            this.outUtc = _data["OutUtc"] ? new Date(_data["OutUtc"].toString()) : <any>undefined;
            (<any>this).outLocal = _data["OutLocal"] ? new Date(_data["OutLocal"].toString()) : <any>undefined;
            this.durationHours = _data["DurationHours"];
            this.durationExcludingBreakHours = _data["DurationExcludingBreakHours"];
        }
    }

    static fromJS(data: any): TimeReportInconvenientTimeFragment {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportInconvenientTimeFragment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["TimeReportID"] = this.timeReportID;
        data["DefinitionName"] = this.definitionName;
        data["TypeID"] = this.typeID;
        data["TypeName"] = this.typeName;
        data["TypePriority"] = this.typePriority;
        data["InUtc"] = this.inUtc ? this.inUtc.toISOString() : <any>undefined;
        data["InLocal"] = this.inLocal ? this.inLocal.toISOString() : <any>undefined;
        data["OutUtc"] = this.outUtc ? this.outUtc.toISOString() : <any>undefined;
        data["OutLocal"] = this.outLocal ? this.outLocal.toISOString() : <any>undefined;
        data["DurationHours"] = this.durationHours;
        data["DurationExcludingBreakHours"] = this.durationExcludingBreakHours;
        return data;
    }
}

export interface ITimeReportInconvenientTimeFragment {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    definitionName?: string | undefined;
    typeID?: number | undefined;
    typeName?: string | undefined;
    typePriority?: number | undefined;
    inUtc?: Date | undefined;
    inLocal?: Date | undefined;
    outUtc?: Date | undefined;
    outLocal?: Date | undefined;
    durationHours?: number | undefined;
    durationExcludingBreakHours?: number | undefined;
}

export class TimeReportInconvenientTime implements ITimeReportInconvenientTime {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    paymentTypeExtCode?: string | undefined;
    modifier?: number | undefined;
    sum?: number | undefined;
    hours?: number | undefined;

    constructor(data?: ITimeReportInconvenientTime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.timeReportID = _data["TimeReportID"];
            this.paymentTypeExtCode = _data["PaymentTypeExtCode"];
            this.modifier = _data["Modifier"];
            this.sum = _data["Sum"];
            this.hours = _data["Hours"];
        }
    }

    static fromJS(data: any): TimeReportInconvenientTime {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportInconvenientTime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["TimeReportID"] = this.timeReportID;
        data["PaymentTypeExtCode"] = this.paymentTypeExtCode;
        data["Modifier"] = this.modifier;
        data["Sum"] = this.sum;
        data["Hours"] = this.hours;
        return data;
    }
}

export interface ITimeReportInconvenientTime {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    paymentTypeExtCode?: string | undefined;
    modifier?: number | undefined;
    sum?: number | undefined;
    hours?: number | undefined;
}

export class TimeReportRegisteredFragment implements ITimeReportRegisteredFragment {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    inUtc?: Date | undefined;
    readonly inLocal?: Date | undefined;
    outUtc?: Date | undefined;
    readonly outLocal?: Date | undefined;
    durationHours?: number | undefined;
    originalInUtc?: Date | undefined;
    readonly originalInLocal?: Date | undefined;
    originalOutUtc?: Date | undefined;
    readonly originalOutLocal?: Date | undefined;
    originalDurationHours?: number | undefined;
    organisationUnitCategoryID?: number | undefined;
    costAccountCategoryID?: number | undefined;
    categoryID?: number | undefined;
    inDeviationCategoryID?: number | undefined;
    outDeviationCategoryID?: number | undefined;

    constructor(data?: ITimeReportRegisteredFragment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.timeReportID = _data["TimeReportID"];
            this.inUtc = _data["InUtc"] ? new Date(_data["InUtc"].toString()) : <any>undefined;
            (<any>this).inLocal = _data["InLocal"] ? new Date(_data["InLocal"].toString()) : <any>undefined;
            this.outUtc = _data["OutUtc"] ? new Date(_data["OutUtc"].toString()) : <any>undefined;
            (<any>this).outLocal = _data["OutLocal"] ? new Date(_data["OutLocal"].toString()) : <any>undefined;
            this.durationHours = _data["DurationHours"];
            this.originalInUtc = _data["OriginalInUtc"] ? new Date(_data["OriginalInUtc"].toString()) : <any>undefined;
            (<any>this).originalInLocal = _data["OriginalInLocal"] ? new Date(_data["OriginalInLocal"].toString()) : <any>undefined;
            this.originalOutUtc = _data["OriginalOutUtc"] ? new Date(_data["OriginalOutUtc"].toString()) : <any>undefined;
            (<any>this).originalOutLocal = _data["OriginalOutLocal"] ? new Date(_data["OriginalOutLocal"].toString()) : <any>undefined;
            this.originalDurationHours = _data["OriginalDurationHours"];
            this.organisationUnitCategoryID = _data["OrganisationUnitCategoryID"];
            this.costAccountCategoryID = _data["CostAccountCategoryID"];
            this.categoryID = _data["CategoryID"];
            this.inDeviationCategoryID = _data["InDeviationCategoryID"];
            this.outDeviationCategoryID = _data["OutDeviationCategoryID"];
        }
    }

    static fromJS(data: any): TimeReportRegisteredFragment {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportRegisteredFragment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["TimeReportID"] = this.timeReportID;
        data["InUtc"] = this.inUtc ? this.inUtc.toISOString() : <any>undefined;
        data["InLocal"] = this.inLocal ? this.inLocal.toISOString() : <any>undefined;
        data["OutUtc"] = this.outUtc ? this.outUtc.toISOString() : <any>undefined;
        data["OutLocal"] = this.outLocal ? this.outLocal.toISOString() : <any>undefined;
        data["DurationHours"] = this.durationHours;
        data["OriginalInUtc"] = this.originalInUtc ? this.originalInUtc.toISOString() : <any>undefined;
        data["OriginalInLocal"] = this.originalInLocal ? this.originalInLocal.toISOString() : <any>undefined;
        data["OriginalOutUtc"] = this.originalOutUtc ? this.originalOutUtc.toISOString() : <any>undefined;
        data["OriginalOutLocal"] = this.originalOutLocal ? this.originalOutLocal.toISOString() : <any>undefined;
        data["OriginalDurationHours"] = this.originalDurationHours;
        data["OrganisationUnitCategoryID"] = this.organisationUnitCategoryID;
        data["CostAccountCategoryID"] = this.costAccountCategoryID;
        data["CategoryID"] = this.categoryID;
        data["InDeviationCategoryID"] = this.inDeviationCategoryID;
        data["OutDeviationCategoryID"] = this.outDeviationCategoryID;
        return data;
    }
}

export interface ITimeReportRegisteredFragment {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    inUtc?: Date | undefined;
    inLocal?: Date | undefined;
    outUtc?: Date | undefined;
    outLocal?: Date | undefined;
    durationHours?: number | undefined;
    originalInUtc?: Date | undefined;
    originalInLocal?: Date | undefined;
    originalOutUtc?: Date | undefined;
    originalOutLocal?: Date | undefined;
    originalDurationHours?: number | undefined;
    organisationUnitCategoryID?: number | undefined;
    costAccountCategoryID?: number | undefined;
    categoryID?: number | undefined;
    inDeviationCategoryID?: number | undefined;
    outDeviationCategoryID?: number | undefined;
}

export class TimeReportRegisteredScheduledFragment implements ITimeReportRegisteredScheduledFragment {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    inUtc?: Date | undefined;
    readonly inLocal?: Date | undefined;
    outUtc?: Date | undefined;
    readonly outLocal?: Date | undefined;
    durationHours?: number | undefined;
    organisationUnitCategoryID?: number | undefined;
    costAccountCategoryID?: number | undefined;
    categoryID?: number | undefined;
    inDeviationCategoryID?: number | undefined;
    outDeviationCategoryID?: number | undefined;

    constructor(data?: ITimeReportRegisteredScheduledFragment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.timeReportID = _data["TimeReportID"];
            this.inUtc = _data["InUtc"] ? new Date(_data["InUtc"].toString()) : <any>undefined;
            (<any>this).inLocal = _data["InLocal"] ? new Date(_data["InLocal"].toString()) : <any>undefined;
            this.outUtc = _data["OutUtc"] ? new Date(_data["OutUtc"].toString()) : <any>undefined;
            (<any>this).outLocal = _data["OutLocal"] ? new Date(_data["OutLocal"].toString()) : <any>undefined;
            this.durationHours = _data["DurationHours"];
            this.organisationUnitCategoryID = _data["OrganisationUnitCategoryID"];
            this.costAccountCategoryID = _data["CostAccountCategoryID"];
            this.categoryID = _data["CategoryID"];
            this.inDeviationCategoryID = _data["InDeviationCategoryID"];
            this.outDeviationCategoryID = _data["OutDeviationCategoryID"];
        }
    }

    static fromJS(data: any): TimeReportRegisteredScheduledFragment {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportRegisteredScheduledFragment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["TimeReportID"] = this.timeReportID;
        data["InUtc"] = this.inUtc ? this.inUtc.toISOString() : <any>undefined;
        data["InLocal"] = this.inLocal ? this.inLocal.toISOString() : <any>undefined;
        data["OutUtc"] = this.outUtc ? this.outUtc.toISOString() : <any>undefined;
        data["OutLocal"] = this.outLocal ? this.outLocal.toISOString() : <any>undefined;
        data["DurationHours"] = this.durationHours;
        data["OrganisationUnitCategoryID"] = this.organisationUnitCategoryID;
        data["CostAccountCategoryID"] = this.costAccountCategoryID;
        data["CategoryID"] = this.categoryID;
        data["InDeviationCategoryID"] = this.inDeviationCategoryID;
        data["OutDeviationCategoryID"] = this.outDeviationCategoryID;
        return data;
    }
}

export interface ITimeReportRegisteredScheduledFragment {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    inUtc?: Date | undefined;
    inLocal?: Date | undefined;
    outUtc?: Date | undefined;
    outLocal?: Date | undefined;
    durationHours?: number | undefined;
    organisationUnitCategoryID?: number | undefined;
    costAccountCategoryID?: number | undefined;
    categoryID?: number | undefined;
    inDeviationCategoryID?: number | undefined;
    outDeviationCategoryID?: number | undefined;
}

export class TimeReportRegisteredScheduledAbsenceFragment implements ITimeReportRegisteredScheduledAbsenceFragment {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    inUtc?: Date | undefined;
    readonly inLocal?: Date | undefined;
    outUtc?: Date | undefined;
    readonly outLocal?: Date | undefined;
    durationHours?: number | undefined;
    organisationUnitCategoryID?: number | undefined;
    costAccountCategoryID?: number | undefined;
    leaveID?: number | undefined;
    categoryID?: number | undefined;

    constructor(data?: ITimeReportRegisteredScheduledAbsenceFragment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.timeReportID = _data["TimeReportID"];
            this.inUtc = _data["InUtc"] ? new Date(_data["InUtc"].toString()) : <any>undefined;
            (<any>this).inLocal = _data["InLocal"] ? new Date(_data["InLocal"].toString()) : <any>undefined;
            this.outUtc = _data["OutUtc"] ? new Date(_data["OutUtc"].toString()) : <any>undefined;
            (<any>this).outLocal = _data["OutLocal"] ? new Date(_data["OutLocal"].toString()) : <any>undefined;
            this.durationHours = _data["DurationHours"];
            this.organisationUnitCategoryID = _data["OrganisationUnitCategoryID"];
            this.costAccountCategoryID = _data["CostAccountCategoryID"];
            this.leaveID = _data["LeaveID"];
            this.categoryID = _data["CategoryID"];
        }
    }

    static fromJS(data: any): TimeReportRegisteredScheduledAbsenceFragment {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportRegisteredScheduledAbsenceFragment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["TimeReportID"] = this.timeReportID;
        data["InUtc"] = this.inUtc ? this.inUtc.toISOString() : <any>undefined;
        data["InLocal"] = this.inLocal ? this.inLocal.toISOString() : <any>undefined;
        data["OutUtc"] = this.outUtc ? this.outUtc.toISOString() : <any>undefined;
        data["OutLocal"] = this.outLocal ? this.outLocal.toISOString() : <any>undefined;
        data["DurationHours"] = this.durationHours;
        data["OrganisationUnitCategoryID"] = this.organisationUnitCategoryID;
        data["CostAccountCategoryID"] = this.costAccountCategoryID;
        data["LeaveID"] = this.leaveID;
        data["CategoryID"] = this.categoryID;
        return data;
    }
}

export interface ITimeReportRegisteredScheduledAbsenceFragment {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    inUtc?: Date | undefined;
    inLocal?: Date | undefined;
    outUtc?: Date | undefined;
    outLocal?: Date | undefined;
    durationHours?: number | undefined;
    organisationUnitCategoryID?: number | undefined;
    costAccountCategoryID?: number | undefined;
    leaveID?: number | undefined;
    categoryID?: number | undefined;
}

export class TimeReportDeviationFragment implements ITimeReportDeviationFragment {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    inUtc?: Date | undefined;
    readonly inLocal?: Date | undefined;
    outUtc?: Date | undefined;
    readonly outLocal?: Date | undefined;
    durationHours?: number | undefined;
    deviationHours?: number | undefined;

    constructor(data?: ITimeReportDeviationFragment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.timeReportID = _data["TimeReportID"];
            this.inUtc = _data["InUtc"] ? new Date(_data["InUtc"].toString()) : <any>undefined;
            (<any>this).inLocal = _data["InLocal"] ? new Date(_data["InLocal"].toString()) : <any>undefined;
            this.outUtc = _data["OutUtc"] ? new Date(_data["OutUtc"].toString()) : <any>undefined;
            (<any>this).outLocal = _data["OutLocal"] ? new Date(_data["OutLocal"].toString()) : <any>undefined;
            this.durationHours = _data["DurationHours"];
            this.deviationHours = _data["DeviationHours"];
        }
    }

    static fromJS(data: any): TimeReportDeviationFragment {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportDeviationFragment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["TimeReportID"] = this.timeReportID;
        data["InUtc"] = this.inUtc ? this.inUtc.toISOString() : <any>undefined;
        data["InLocal"] = this.inLocal ? this.inLocal.toISOString() : <any>undefined;
        data["OutUtc"] = this.outUtc ? this.outUtc.toISOString() : <any>undefined;
        data["OutLocal"] = this.outLocal ? this.outLocal.toISOString() : <any>undefined;
        data["DurationHours"] = this.durationHours;
        data["DeviationHours"] = this.deviationHours;
        return data;
    }
}

export interface ITimeReportDeviationFragment {
    iD?: number | undefined;
    timeReportID?: number | undefined;
    inUtc?: Date | undefined;
    inLocal?: Date | undefined;
    outUtc?: Date | undefined;
    outLocal?: Date | undefined;
    durationHours?: number | undefined;
    deviationHours?: number | undefined;
}

export class TimeReportStatus implements ITimeReportStatus {
    timeReport?: TimeReport | undefined;
    activeRegisteredFragment?: TimeReportRegisteredFragment | undefined;
    currentScheduledFragment?: TimeReportFragment | undefined;
    nextScheduledFragment?: TimeReportFragment | undefined;

    constructor(data?: ITimeReportStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timeReport = _data["TimeReport"] ? TimeReport.fromJS(_data["TimeReport"]) : <any>undefined;
            this.activeRegisteredFragment = _data["ActiveRegisteredFragment"] ? TimeReportRegisteredFragment.fromJS(_data["ActiveRegisteredFragment"]) : <any>undefined;
            this.currentScheduledFragment = _data["CurrentScheduledFragment"] ? TimeReportFragment.fromJS(_data["CurrentScheduledFragment"]) : <any>undefined;
            this.nextScheduledFragment = _data["NextScheduledFragment"] ? TimeReportFragment.fromJS(_data["NextScheduledFragment"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TimeReportStatus {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TimeReport"] = this.timeReport ? this.timeReport.toJSON() : <any>undefined;
        data["ActiveRegisteredFragment"] = this.activeRegisteredFragment ? this.activeRegisteredFragment.toJSON() : <any>undefined;
        data["CurrentScheduledFragment"] = this.currentScheduledFragment ? this.currentScheduledFragment.toJSON() : <any>undefined;
        data["NextScheduledFragment"] = this.nextScheduledFragment ? this.nextScheduledFragment.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITimeReportStatus {
    timeReport?: TimeReport | undefined;
    activeRegisteredFragment?: TimeReportRegisteredFragment | undefined;
    currentScheduledFragment?: TimeReportFragment | undefined;
    nextScheduledFragment?: TimeReportFragment | undefined;
}

export class TimeReportOptions implements ITimeReportOptions {
    registeredFragmentsIncludeOrganisationSubUnit?: boolean | undefined;
    allowEmployeeToAddRegisteredFragments?: boolean | undefined;
    allowEmployeeToEditRegisteredFragments?: boolean | undefined;
    ignorePositiveDeviationMinutes?: number | undefined;
    ignoreNegativeDeviationMinutes?: number | undefined;

    constructor(data?: ITimeReportOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.registeredFragmentsIncludeOrganisationSubUnit = _data["RegisteredFragmentsIncludeOrganisationSubUnit"];
            this.allowEmployeeToAddRegisteredFragments = _data["AllowEmployeeToAddRegisteredFragments"];
            this.allowEmployeeToEditRegisteredFragments = _data["AllowEmployeeToEditRegisteredFragments"];
            this.ignorePositiveDeviationMinutes = _data["IgnorePositiveDeviationMinutes"];
            this.ignoreNegativeDeviationMinutes = _data["IgnoreNegativeDeviationMinutes"];
        }
    }

    static fromJS(data: any): TimeReportOptions {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RegisteredFragmentsIncludeOrganisationSubUnit"] = this.registeredFragmentsIncludeOrganisationSubUnit;
        data["AllowEmployeeToAddRegisteredFragments"] = this.allowEmployeeToAddRegisteredFragments;
        data["AllowEmployeeToEditRegisteredFragments"] = this.allowEmployeeToEditRegisteredFragments;
        data["IgnorePositiveDeviationMinutes"] = this.ignorePositiveDeviationMinutes;
        data["IgnoreNegativeDeviationMinutes"] = this.ignoreNegativeDeviationMinutes;
        return data;
    }
}

export interface ITimeReportOptions {
    registeredFragmentsIncludeOrganisationSubUnit?: boolean | undefined;
    allowEmployeeToAddRegisteredFragments?: boolean | undefined;
    allowEmployeeToEditRegisteredFragments?: boolean | undefined;
    ignorePositiveDeviationMinutes?: number | undefined;
    ignoreNegativeDeviationMinutes?: number | undefined;
}

export class TimeReportsSyncGetRequest implements ITimeReportsSyncGetRequest {
    startDate?: Date | undefined;
    endDate?: Date | undefined;

    constructor(data?: ITimeReportsSyncGetRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startDate = _data["StartDate"] ? new Date(_data["StartDate"].toString()) : <any>undefined;
            this.endDate = _data["EndDate"] ? new Date(_data["EndDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TimeReportsSyncGetRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportsSyncGetRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["StartDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ITimeReportsSyncGetRequest {
    startDate?: Date | undefined;
    endDate?: Date | undefined;
}

export class TimeReportsSyncStatus implements ITimeReportsSyncStatus {
    timestampUtc?: Date | undefined;
    readonly timestampLocal?: Date | undefined;
    expired?: boolean | undefined;

    constructor(data?: ITimeReportsSyncStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timestampUtc = _data["TimestampUtc"] ? new Date(_data["TimestampUtc"].toString()) : <any>undefined;
            (<any>this).timestampLocal = _data["TimestampLocal"] ? new Date(_data["TimestampLocal"].toString()) : <any>undefined;
            this.expired = _data["Expired"];
        }
    }

    static fromJS(data: any): TimeReportsSyncStatus {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportsSyncStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TimestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["TimestampLocal"] = this.timestampLocal ? this.timestampLocal.toISOString() : <any>undefined;
        data["Expired"] = this.expired;
        return data;
    }
}

export interface ITimeReportsSyncStatus {
    timestampUtc?: Date | undefined;
    timestampLocal?: Date | undefined;
    expired?: boolean | undefined;
}

export class TimeReportsSyncPostRequest implements ITimeReportsSyncPostRequest {
    startDate?: Date | undefined;
    endDate?: Date | undefined;

    constructor(data?: ITimeReportsSyncPostRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startDate = _data["StartDate"] ? new Date(_data["StartDate"].toString()) : <any>undefined;
            this.endDate = _data["EndDate"] ? new Date(_data["EndDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TimeReportsSyncPostRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportsSyncPostRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["StartDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["EndDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ITimeReportsSyncPostRequest {
    startDate?: Date | undefined;
    endDate?: Date | undefined;
}

export class TimeReportCategory implements ITimeReportCategory {
    iD?: number | undefined;
    cID?: number | undefined;
    name?: string | undefined;
    absence?: boolean | undefined;
    sickLeaveAbsence?: boolean | undefined;
    default?: boolean | undefined;

    constructor(data?: ITimeReportCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.cID = _data["CID"];
            this.name = _data["Name"];
            this.absence = _data["Absence"];
            this.sickLeaveAbsence = _data["SickLeaveAbsence"];
            this.default = _data["Default"];
        }
    }

    static fromJS(data: any): TimeReportCategory {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["CID"] = this.cID;
        data["Name"] = this.name;
        data["Absence"] = this.absence;
        data["SickLeaveAbsence"] = this.sickLeaveAbsence;
        data["Default"] = this.default;
        return data;
    }
}

export interface ITimeReportCategory {
    iD?: number | undefined;
    cID?: number | undefined;
    name?: string | undefined;
    absence?: boolean | undefined;
    sickLeaveAbsence?: boolean | undefined;
    default?: boolean | undefined;
}

export class TimeReportRegisteredDeviationCategory implements ITimeReportRegisteredDeviationCategory {
    iD?: number | undefined;
    cID?: number | undefined;
    name?: string | undefined;
    in?: boolean | undefined;
    out?: boolean | undefined;

    constructor(data?: ITimeReportRegisteredDeviationCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.cID = _data["CID"];
            this.name = _data["Name"];
            this.in = _data["In"];
            this.out = _data["Out"];
        }
    }

    static fromJS(data: any): TimeReportRegisteredDeviationCategory {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportRegisteredDeviationCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["CID"] = this.cID;
        data["Name"] = this.name;
        data["In"] = this.in;
        data["Out"] = this.out;
        return data;
    }
}

export interface ITimeReportRegisteredDeviationCategory {
    iD?: number | undefined;
    cID?: number | undefined;
    name?: string | undefined;
    in?: boolean | undefined;
    out?: boolean | undefined;
}

export class TimeReportEditPostRequest implements ITimeReportEditPostRequest {
    date?: Date | undefined;
    readonly registeredFragments?: TimeReportEditRegisteredFragmentPostRequest[] | undefined;
    employeeComment?: string | undefined;

    constructor(data?: ITimeReportEditPostRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["Date"] ? new Date(_data["Date"].toString()) : <any>undefined;
            if (Array.isArray(_data["RegisteredFragments"])) {
                (<any>this).registeredFragments = [] as any;
                for (let item of _data["RegisteredFragments"])
                    (<any>this).registeredFragments!.push(TimeReportEditRegisteredFragmentPostRequest.fromJS(item));
            }
            this.employeeComment = _data["EmployeeComment"];
        }
    }

    static fromJS(data: any): TimeReportEditPostRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportEditPostRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Date"] = this.date ? this.date.toISOString() : <any>undefined;
        if (Array.isArray(this.registeredFragments)) {
            data["RegisteredFragments"] = [];
            for (let item of this.registeredFragments)
                data["RegisteredFragments"].push(item.toJSON());
        }
        data["EmployeeComment"] = this.employeeComment;
        return data;
    }
}

export interface ITimeReportEditPostRequest {
    date?: Date | undefined;
    registeredFragments?: TimeReportEditRegisteredFragmentPostRequest[] | undefined;
    employeeComment?: string | undefined;
}

export class TimeReportEditRegisteredFragmentPostRequest implements ITimeReportEditRegisteredFragmentPostRequest {
    iD?: number | undefined;
    inLocal?: Date | undefined;
    outLocal?: Date | undefined;
    organisationUnitCategoryID?: number | undefined;
    costAccountCategoryID?: number | undefined;
    categoryID?: number | undefined;

    constructor(data?: ITimeReportEditRegisteredFragmentPostRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.inLocal = _data["InLocal"] ? new Date(_data["InLocal"].toString()) : <any>undefined;
            this.outLocal = _data["OutLocal"] ? new Date(_data["OutLocal"].toString()) : <any>undefined;
            this.organisationUnitCategoryID = _data["OrganisationUnitCategoryID"];
            this.costAccountCategoryID = _data["CostAccountCategoryID"];
            this.categoryID = _data["CategoryID"];
        }
    }

    static fromJS(data: any): TimeReportEditRegisteredFragmentPostRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportEditRegisteredFragmentPostRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["InLocal"] = this.inLocal ? this.inLocal.toISOString() : <any>undefined;
        data["OutLocal"] = this.outLocal ? this.outLocal.toISOString() : <any>undefined;
        data["OrganisationUnitCategoryID"] = this.organisationUnitCategoryID;
        data["CostAccountCategoryID"] = this.costAccountCategoryID;
        data["CategoryID"] = this.categoryID;
        return data;
    }
}

export interface ITimeReportEditRegisteredFragmentPostRequest {
    iD?: number | undefined;
    inLocal?: Date | undefined;
    outLocal?: Date | undefined;
    organisationUnitCategoryID?: number | undefined;
    costAccountCategoryID?: number | undefined;
    categoryID?: number | undefined;
}

export class TimeReportInOutPostRequest implements ITimeReportInOutPostRequest {
    date?: Date | undefined;
    organisationUnitCategoryID?: number | undefined;
    costAccountCategoryID?: number | undefined;
    categoryID?: number | undefined;
    inDeviationCategoryID?: number | undefined;
    outDeviationCategoryID?: number | undefined;

    constructor(data?: ITimeReportInOutPostRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["Date"] ? new Date(_data["Date"].toString()) : <any>undefined;
            this.organisationUnitCategoryID = _data["OrganisationUnitCategoryID"];
            this.costAccountCategoryID = _data["CostAccountCategoryID"];
            this.categoryID = _data["CategoryID"];
            this.inDeviationCategoryID = _data["InDeviationCategoryID"];
            this.outDeviationCategoryID = _data["OutDeviationCategoryID"];
        }
    }

    static fromJS(data: any): TimeReportInOutPostRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportInOutPostRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["OrganisationUnitCategoryID"] = this.organisationUnitCategoryID;
        data["CostAccountCategoryID"] = this.costAccountCategoryID;
        data["CategoryID"] = this.categoryID;
        data["InDeviationCategoryID"] = this.inDeviationCategoryID;
        data["OutDeviationCategoryID"] = this.outDeviationCategoryID;
        return data;
    }
}

export interface ITimeReportInOutPostRequest {
    date?: Date | undefined;
    organisationUnitCategoryID?: number | undefined;
    costAccountCategoryID?: number | undefined;
    categoryID?: number | undefined;
    inDeviationCategoryID?: number | undefined;
    outDeviationCategoryID?: number | undefined;
}

export class TimeReportSetEmployeeCommentPostRequest implements ITimeReportSetEmployeeCommentPostRequest {
    date?: Date | undefined;
    employeeComment?: string | undefined;

    constructor(data?: ITimeReportSetEmployeeCommentPostRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["Date"] ? new Date(_data["Date"].toString()) : <any>undefined;
            this.employeeComment = _data["EmployeeComment"];
        }
    }

    static fromJS(data: any): TimeReportSetEmployeeCommentPostRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TimeReportSetEmployeeCommentPostRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["EmployeeComment"] = this.employeeComment;
        return data;
    }
}

export interface ITimeReportSetEmployeeCommentPostRequest {
    date?: Date | undefined;
    employeeComment?: string | undefined;
}

export class Translation implements ITranslation {

    constructor(data?: ITranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Translation {
        data = typeof data === 'object' ? data : {};
        let result = new Translation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ITranslation {
}

export class User implements IUser {

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IUser {
}

export class UserLimited implements IUserLimited {

    constructor(data?: IUserLimited) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): UserLimited {
        data = typeof data === 'object' ? data : {};
        let result = new UserLimited();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IUserLimited {
}

export class VacationInfo implements IVacationInfo {

    constructor(data?: IVacationInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): VacationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new VacationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IVacationInfo {
}

export class Vacation implements IVacation {

    constructor(data?: IVacation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Vacation {
        data = typeof data === 'object' ? data : {};
        let result = new Vacation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IVacation {
}

export class Anonymous implements IAnonymous {
    /** Access token */
    access_token?: string | undefined;
    /** Type of token */
    token_type?: string | undefined;
    /** Seconds left until token expires */
    expires_in?: number | undefined;

    constructor(data?: IAnonymous) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.access_token = _data["access_token"];
            this.token_type = _data["token_type"];
            this.expires_in = _data["expires_in"];
        }
    }

    static fromJS(data: any): Anonymous {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["access_token"] = this.access_token;
        data["token_type"] = this.token_type;
        data["expires_in"] = this.expires_in;
        return data;
    }
}

export interface IAnonymous {
    /** Access token */
    access_token?: string | undefined;
    /** Type of token */
    token_type?: string | undefined;
    /** Seconds left until token expires */
    expires_in?: number | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

}